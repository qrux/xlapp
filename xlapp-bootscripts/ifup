#!/bin/sh
########################################################################
# Begin /sbin/ifup
#
# Description : Interface Up
#
# Authors     : Nathan Coulson - nathan@linuxfromscratch.org
#               Kevin P. Fleming - kpfleming@linuxfromscratch.org
# Update      : Bruce Dubbs - bdubbs@linuxfromscratch.org
#
# Version     : LFS 7.0
#
# Notes       : The ${file} variable is passed to the SERVICE script
#               in the /lib/services directory, to indicate what file the
#               service should source to get interface specifications.
#
########################################################################

RELEASE="7.0"

USAGE="Usage: $0 [ -hV ] [--help] [--version] interface"
VERSTR="LFS ifup, version ${RELEASE}"

while [ $# -gt 0 ]; do
  case "$1" in
     --help | -h)     help="y"; break ;;

     --version | -V)  echo "${VERSTR}"; exit 0 ;;

     -*)              echo "ifup: ${1}: invalid option" >&2
                      echo "${USAGE}" >& 2
                      exit 2 ;;

     *)               break ;;
  esac
done

if [ -n "$help" ]; then
  echo "${VERSTR}"
  echo "${USAGE}"
  echo
  cat << HERE_EOF
ifup is used to bring up a network interface.  The interface
parameter, e.g. eth0 or eth0:2, must match the trailing part of the
interface specifications file, e.g. /etc/sysconfig/ifconfig.eth0:2.

HERE_EOF
  exit 0
fi

file=/etc/sysconfig/ifconfig.${1}

# Skip backup files
[ "${file}" = "${file%""~""}" ] || exit 0

. /lib/lsb/init-functions

if [ ! -r "${file}" ]; then
  log_warning_msg "\n${file} is missing or cannot be accessed." 
  exit 1
fi

. $file

# Do not process this service if started by boot, and ONBOOT
# is not set to yes
if [ "${IN_BOOT}" = "1" -a "${ONBOOT}" != "yes" ]; then
  log_info_msg2 "skipped\n"
  exit 0
fi

log_info_msg "Bringing up the ${1} interface... "

if [ -z "$PHYS" ]; then
  log_failure_msg "\n${file} does not define any physical interfaces [PHYS]."
  exit 1
fi

for S in ${SERVICE}; do
 if [ ! -n "${S}" -o ! -x "/lib/services/${S}" ]; then
   MSG="\nUnable to process ${file}.  Either" 
   MSG="${MSG} the SERVICE variable was not set"
   MSG="${MSG} or the specified service cannot be executed."
   log_failure_msg "$MSG"
   exit 1
 fi
done

PHY_IDX=0
for PHY in $PHYS ; do
  if [ -z "${CHECK_LINK}"         -o \
         "${CHECK_LINK}" = "y"   -o \
         "${CHECK_LINK}" = "yes" -o \
         "${CHECK_LINK}" = "1" ]; then

    #  Bring up the interface
    if ip link show ${PHY} > /dev/null 2>&1; then
       link_status=`ip link show ${PHY}`

       if [ -n "${link_status}" ]; then
          if ! echo "${link_status}" | grep -q UP; then
             ip link set ${PHY} up
          fi
       fi

    else
       log_warning_msg "\nInterface ${PHY} doesn't exist."
       exit 0
    fi

    # Link is up, so set MTU
    if test -n "${MTU}"; then
      # Use the proper MTU if there are multiple MTUs set in ${MTU}.
      M=$(echo $MTU | awk -v idx=$PHY_IDX '{printf("%s", $idx);}')

      # If there is only one ${MTU}, but multiple ${PHYS}, use ${MTU}.
      test -z ${M} && M="${MTU}"

      # Check if MTU has a "good" value.
      if [ ${M} -gt 0 ] ; then
        ip link set dev ${PHY} mtu ${M}
      else
        echo "Invalid MTU ${M}"
      fi
    fi
  fi

  PHY_IDX=$((1 + ${PHY_IDX}))
done

for S in ${SERVICE}; do 
  /lib/services/${S} ${file} up
done

# End /sbin/ifup

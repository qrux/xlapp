#! /bin/bash
set -e
set +h

unset SKIP_MACHINE_CONFIG
while getopts "x" OPT ; do
	case "$OPT" in
		x) SKIP_MACHINE_CONFIG=1;;
	esac
done
shift $(($OPTIND-1))

totime()
{
	date '+%Y%m%d_%H%M%S'
}

PROG_PATH=$0
PROG_DIR=$(dirname $PROG_PATH)
PROG_NAME=$(basename $PROG_PATH)
CONF_FILE="${PROG_DIR}/machine.config"

if [ -z $SKIP_MACHINE_CONFIG ] ; then
	#echo "  Using machine template: $CONF_FILE..."
	. $CONF_FILE
fi

__PROG_NAME=$1
if [ -z $__PROG_NAME ] ; then
	echo
	echo "  Usage: build <lfs-build-script>"
	echo
	exit
fi

__PROG_NAME=$(basename $__PROG_NAME)
__SECTION=$(echo $__PROG_NAME | cut -d \- -f 1)
__PKG=$(echo $__PROG_NAME | cut -d \- -f 2-)
BUILD="${__PKG}-build"

__CHAPTER=$(echo $__SECTION | cut -d \. -f 1)
__CHAPTER_CONF_FILE="opts-${__CHAPTER}"
#
# See outermost script (lfs) to ensure this is created.
#
__TEST_OUTPUT_DIR="../../tests"
__TEST_OUTPUT="${__TEST_OUTPUT_DIR}/${__PROG_NAME}.tout"

export __PROG_NAME
export __SECTION
export __CHAPTER
export __TEST_OUTPUT

if [ "b2" = "$__CHAPTER" ] ; then
	if [ -d /usr/sbin ] ; then PATH=/usr/sbin:$PATH ; fi
	if [ -d /sbin ] ; then PATH=/sbin:$PATH ; fi
	if [ -d /usr/local/sbin ] ; then PATH=$PATH:/usr/local/sbin ; fi
	if [ -d /usr/local/bin ] ; then PATH=$PATH:/usr/local/bin ; fi
	echo "Chapter [b2] - PATH: $PATH"
	echo "Chapter [b2] - USER: $USER"
fi

PROG_DIR=$(pwd)
__SCRIPT="${PROG_DIR}/${__PROG_NAME}"

########################################################################
#
# At this point, decide if it's a TO-RUN script (will be +x).
#
########################################################################
if [ -x ${__SCRIPT} ] ; then
	# Precaution against running on host system...
	if [ -d /mnt/lfs ] ; then
		echo "This looks like the HOST system (not LFS)..."
		echo "  CHAPTER: $__CHAPTER"
		if [ 5 -ne $__CHAPTER ] ; then echo "Aborting!" ; false ; fi
	fi

	echo    "################################################################"
	echo    "#"
	echo    "#  RUNNING - $__SECTION - $__PKG"
	echo    "#"
	echo -n "#    Working in directory: " ; pwd
	echo    "#"
	echo    "################################################################"

	. ${__SCRIPT}

	echo "################################################################"
	echo "#"
	echo "#  [ $__SECTION - $__PKG ] run successfully; continuing"
	echo "#"
	echo "################################################################"
	
	exit
fi

########################################################################
#
# If it's a TO-BUILD, (not executable), descend into src dir.
#
########################################################################
cd ./src

TARBALL=$(find . -mindepth 1 -maxdepth 1 -type f -name "$__PKG.tar*")
if [ -z $TARBALL ] ; then
	TARBALL=$(find . -mindepth 1 -maxdepth 1 -type f -name "$__PKG-[0-9]*.tar*")
fi
if [ -z $TARBALL ] ; then
	TARBALL=$(find . -mindepth 1 -maxdepth 1 -type f -name "$__PKG*.tar*")
fi
if [ -z $TARBALL ] ; then
	TARBALL=$(find . -mindepth 1 -maxdepth 1 -type f -name "$__PKG*.tgz*")
fi

echo "(Cleaning up files from previous builds...)"
find . -mindepth 1 -maxdepth 1 -type d
find . -mindepth 1 -maxdepth 1 -type d -exec rm -rf {} \;

echo    "################################################################"
echo    "#"
echo    "#  BUILDING - $__SECTION - $__PKG (with ${MAKEFLAGS})"
echo    "#"
echo    "#    Unpacking $TARBALL..."
echo -n "#    Working in directory: " ; pwd
echo    "#"
echo    "################################################################"

#
# Untar
#
tar xf $TARBALL

#
# Descend into untar'ed directory.
#
UNPACK_DIR=$(find . -mindepth 1 -maxdepth 1 -type d -name "$__PKG*")
cd $UNPACK_DIR

unset BUILD
unset TARBALL

################################################################
# Run TO-BUILD script
################################################################

. ${__SCRIPT}

echo "################################################################"
echo "#"
echo "#  [ $__SECTION - $__PKG ] built successfully; continuing"
echo "#"
echo "################################################################"

#! /bin/bash
set -e
set +h

JUST_TESTING=0

while getopts "s:e:n" OPT ; do
	case "$OPT" in
		s) START="$OPTARG";;
		e) END="$OPTARG";;
		n) JUST_TESTING=1;;
		?) echo "Unknown options; exiting" ; exit 3;;
	esac
done

if [ -z $START ] ; then
	echo
	echo "  Usage: $0 -s <start-section> -e <end-section>"
	echo
	exit 1
fi
if [ -z $END ] ; then
	echo
	echo "  Usage: $0 -s <start-section> -e <end-section>"
	echo
	END=$START
fi

echo "Building [$START, $END] (inclusive; testing? $JUST_TESTING)..."
HAS_STARTED=0

STARTING_CHAPTER=5

START_PHASE=$(echo $START | cut -d '.' -f 1)
START_NUM=$(  echo $START | cut -d '.' -f 2)
END_PHASE=$(  echo   $END | cut -d '.' -f 1)
END_NUM=$(    echo   $END | cut -d '.' -f 2)

#echo "  start-phase: $START_PHASE"
#echo "    start-num: $START_NUM"
#echo "    end-phase: $END_PHASE"
#echo "      end-num: $END_NUM"

for PHASE in $(seq $STARTING_CHAPTER 9) b0 b1 b2 ; do
	echo "    (Current phase: $PHASE)"
	if [ 0 -eq $HAS_STARTED ] ; then
		if [ $PHASE != $START_PHASE ] ; then
			echo "(skipping phase $PHASE)"
			continue
		fi
	fi

	# At this point, the phase matches (e.g., 6.xy or 7.nm).
	for SCRIPT_INDEX in $(seq 0 99) ; do
		# Doing the check isolates the check; otherwise, has to be done in multiple places.
		#echo "==== SCRIPT_NUM: $SCRIPT_NUM ===="
		#echo "---- END_NUM: $END_NUM ===="

		# Logic:
		#   if ( hasn't-started ), then skip if phase doesn't match.
		#   else, if phase matches, set (has-started = TRUE).
		#   if ( has-started ),
		#     if ( phase == end-phase )
		#       if ( SCRIPT_NUM > END_NUM ), then EXIT,
		#     Run script.
		SCRIPT_NUM=$SCRIPT_INDEX
		if [ 10 -gt $SCRIPT_NUM ] ; then SCRIPT_NUM="0${SCRIPT_INDEX}" ; fi

		CURRENT="${PHASE}.${SCRIPT_NUM}"

		if [ 0 -eq $HAS_STARTED ] ; then
			#echo "At start? Current: $CURRENT, Start: $START"
			if [ $CURRENT = $START ] ; then
				#echo "  (starting at $CURRENT)"
				HAS_STARTED=1
			else
				continue
				#echo "  (skipping current $CURRENT)"
			fi

			echo ">>> Started."
		fi

		if [ 1 -eq $HAS_STARTED ] ; then
			#echo "  (    phase: $PHASE)"
			#echo "  (end-phase: $END_PHASE)"
			if [ $PHASE = $END_PHASE ] ; then
				if [ "$SCRIPT_INDEX" -gt "$END_NUM" ] ; then
					#echo "Reached END."
					exit
				fi
			fi
		fi

		SCRIPT=$(echo ${CURRENT}*)
		SCRIPT_GUARD=".guard-${SCRIPT}"
		if [ ! -e $SCRIPT ] ; then continue ; fi

		if [ 1 -eq $JUST_TESTING ] ; then
			rm -f $SCRIPT_GUARD
			touch $SCRIPT_GUARD
			  date '+%s' >  $SCRIPT_GUARD  # Write  to file.
			  date '+%s' >> $SCRIPT_GUARD  # Append to file.
		else
			if [ -f $SCRIPT_GUARD ] ; then
				SCRIPT_GUARD_LINE_COUNT=$(wc -l $SCRIPT_GUARD | cut -d ' ' -f 1)
				if [ 2 -le $SCRIPT_GUARD_LINE_COUNT ] ; then
					echo "  Skipping $SCRIPT (already built)."
					continue
				else
					rm -f $SCRIPT_GUARD
					touch $SCRIPT_GUARD
				fi
			fi

			#if [ -z "${MAKEFLAGS}" ] ; then
				#echo "  Building $SCRIPT (no MAKEFLAGS)..."
			#else
				#echo "  Building $SCRIPT (MAKEFLAGS: ${MAKEFLAGS})..."
			#fi

			  date '+%s' >  $SCRIPT_GUARD #  Write to file.
			time ./build $SCRIPT
			  date '+%s' >> $SCRIPT_GUARD # Append to file.
		fi
	done
done

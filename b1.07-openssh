#! /bin/bash

echo $PATH

sudo install -v -m700 -d /var/lib/sshd
sudo chown -v root:sys /var/lib/sshd
sudo /usr/sbin/groupadd -g 50 sshd
sudo /usr/sbin/useradd -c 'sshd PrivSep' -d /var/lib/sshd -g sshd \
    -s /bin/false -u 50 sshd

# -> http://www.linuxfromscratch.org/blfs/view/7.7/postlfs/openssh.html
#
# These sed command are no longer needed, and the configure command now
# uses fewer options.
#
#sed -i 's@-lcrypto@/usr/lib/libcrypto.a -ldl@' configure
#sed -i.bak '/K5LIBS=/s/ -ldes//' configure
#
#./configure --prefix=/usr \
            #--sysconfdir=/etc/ssh \
            #--datadir=/usr/share/sshd \
            #--libexecdir=/usr/lib/openssh \
            #--with-md5-passwords \
            #--with-privsep-path=/var/lib/sshd \
            #--with-tcp-wrappers

./configure --prefix=/usr \
            --sysconfdir=/etc/ssh \
            --with-md5-passwords \
            --with-privsep-path=/var/lib/sshd

make

# Additionally, the testsuite requires an installed copy of scp
# to complete the multiplexing tests.
#
# To run the test suite, first copy the scp program to /usr/bin.
SCP_PATH=$(find . -type f -name scp)
if [ -z $SCP_PATH ] ; then
	false
elif [ ! -x $SCP_PATH ] ; then
	false
else
	sudo cp $SCP_PATH /usr/bin
fi

export MAKEFLAGS="-j1"
if [ -z $SKIP_TESTS ] ; then
	make tests 2>&1 | tee check.log
	__SSH_FATAL_ERROR_COUNT=$(grep FATAL check.log | wc -l)
	if [ 0 -lt $__SSH_FATAL_ERROR_COUNT ] ; then
		grep FATAL check.log
		echo "SSH testing failed; aborting"
		false
	fi
fi

sudo /usr/bin/make install
# These install commands are now old.
#sudo /usr/bin/install -v -m755 -d /usr/share/doc/openssh-5.9p1
#sudo /usr/bin/install -v -m644 INSTALL LICENCE OVERVIEW README* \
    #/usr/share/doc/openssh-5.9p1
sudo /usr/bin/install -v -m755    contrib/ssh-copy-id   /usr/bin
sudo /usr/bin/install -v -m644    contrib/ssh-copy-id.1 /usr/share/man/man1
sudo /usr/bin/install -v -m755 -d /usr/share/doc/openssh-7.1p1
sudo /usr/bin/install -v -m644    INSTALL LICENCE OVERVIEW README* /usr/share/doc/openssh-7.1p1

SSH_CONF_FILE=_etc-ssh-sshd-config
rm -f $SSH_CONF_FILE
touch $SSH_CONF_FILE

cat >> $SSH_CONF_FILE <<EOF
# This is the sshd server system-wide configuration file.  See
# sshd_config(5) for more information.

# This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin

# The strategy used for options in the default sshd_config shipped with
# OpenSSH is to specify options with their default value where
# possible, but leave them commented.  Uncommented options override the
# default value.

Port 9922
#AddressFamily any
#ListenAddress 0.0.0.0
#ListenAddress ::

# The default requires explicit activation of protocol 1
Protocol 2

# HostKey for protocol version 1
#HostKey /etc/ssh/ssh_host_key
# HostKeys for protocol version 2
#HostKey /etc/ssh/ssh_host_rsa_key
#HostKey /etc/ssh/ssh_host_dsa_key
#HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key

# Lifetime and size of ephemeral version 1 server key
#KeyRegenerationInterval 1h
KeyRegenerationInterval 600
#ServerKeyBits 1024

# Ciphers and keying
Ciphers chacha20-poly1305@openssh.com
KexAlgorithms curve25519-sha256@libssh.org
MACs hmac-sha2-512-etm@openssh.com

#RekeyLimit default none

# Logging
# obsoletes QuietMode and FascistLogging
#SyslogFacility AUTH
LogLevel VERBOSE

# Authentication:

#LoginGraceTime 2m
PermitRootLogin without-password
StrictModes yes
#MaxAuthTries 6
#MaxSessions 10

#RSAAuthentication yes
PubkeyAuthentication yes

# The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2
# but this is overridden so installations will only check .ssh/authorized_keys
AuthorizedKeysFile	.ssh/authorized_keys

#AuthorizedPrincipalsFile none

#AuthorizedKeysCommand none
#AuthorizedKeysCommandUser nobody

# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
#RhostsRSAAuthentication no
# similar for protocol version 2
#HostbasedAuthentication no
# Change to yes if you don't trust ~/.ssh/known_hosts for
# RhostsRSAAuthentication and HostbasedAuthentication
#IgnoreUserKnownHosts no
# Don't read the user's ~/.rhosts and ~/.shosts files
#IgnoreRhosts yes

# To disable tunneled clear text passwords, change to no here!
PasswordAuthentication no
#PermitEmptyPasswords no

# Change to no to disable s/key passwords
ChallengeResponseAuthentication no

# Kerberos options
#KerberosAuthentication no
#KerberosOrLocalPasswd yes
#KerberosTicketCleanup yes
#KerberosGetAFSToken no

# GSSAPI options
#GSSAPIAuthentication no
#GSSAPICleanupCredentials yes

# Set this to 'yes' to enable PAM authentication, account processing,
# and session processing. If this is enabled, PAM authentication will
# be allowed through the ChallengeResponseAuthentication and
# PasswordAuthentication.  Depending on your PAM configuration,
# PAM authentication via ChallengeResponseAuthentication may bypass
# the setting of "PermitRootLogin without-password".
# If you just want the PAM account and session checks to run without
# PAM authentication, then enable this but set PasswordAuthentication
# and ChallengeResponseAuthentication to 'no'.
#UsePAM no

#AllowAgentForwarding yes
#AllowTcpForwarding yes
#GatewayPorts no
#X11Forwarding no
#X11DisplayOffset 10
#X11UseLocalhost yes
#PermitTTY yes
#PrintMotd yes
#PrintLastLog yes
TCPKeepAlive yes
#UseLogin no
UsePrivilegeSeparation sandbox		# Default for new installations.
#PermitUserEnvironment no
#Compression delayed
#ClientAliveInterval 5
#ClientAliveCountMax 120
UseDNS no
#PidFile /var/run/sshd.pid
#MaxStartups 10:30:100
#PermitTunnel no
#ChrootDirectory none
#VersionAddendum none

# no default banner path
#Banner none

# override default of no subsystems
Subsystem	sftp	/usr/libexec/sftp-server

# Example of overriding settings on a per-user basis
#Match User anoncvs
#	X11Forwarding no
#	AllowTcpForwarding no
#	PermitTTY no
#	ForceCommand cvs server

EOF
sudo cp $SSH_CONF_FILE /etc/ssh/sshd_config

sudo rm -f /etc/ssh/moduli
if [ -n "${XLFS_GENERATE_SSH_MODULI}" ] ; then
	sudo /usr/bin/ssh-keygen -G /etc/ssh/moduli.all -b 4096
	sudo /usr/bin/ssh-keygen -T /etc/ssh/moduli.safe -f /etc/ssh/moduli.all
	sudo mv /etc/ssh/moduli.safe /etc/ssh/moduli
	sudo rm /etc/ssh/moduli.all
fi

cd /etc/ssh
sudo rm ssh_host_*key*
sudo /usr/bin/ssh-keygen -N '' -t ed25519 -f ssh_host_ed25519_key < /dev/null

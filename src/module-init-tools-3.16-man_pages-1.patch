Submitted By:            Matt Burgess <matthew_at_linuxfromscratch_dot_org>
Date:                    2011-10-10
Initial Package Version: 3.16
Upstream Status:         Not submitted
Origin:                  Matt Burgess
Description:             This patch contains generated man pages that were
                         mistakenly omitted from the released tarball.

diff -Naur module-init-tools-3.16.orig/build/depmod.8 module-init-tools-3.16/build/depmod.8
--- module-init-tools-3.16.orig/build/depmod.8	1970-01-01 00:00:00.000000000 +0000
+++ module-init-tools-3.16/build/depmod.8	2011-10-10 20:51:22.103492175 +0000
@@ -0,0 +1,132 @@
+.\\" auto-generated by docbook2man-spec $Revision: 1.2 $
+.TH "DEPMOD" "8" "2011-05-31" "" ""
+.SH NAME
+depmod \- program to generate modules.dep and map files.
+.SH SYNOPSIS
+.sp
+\fBdepmod\fR [ \fB-b \fIbasedir\fB\fR ]  [ \fB-e\fR ]  [ \fB-E \fIModule.symvers\fB\fR ]  [ \fB-F \fISystem.map\fB\fR ]  [ \fB-m\fR ]  [ \fB-n\fR ]  [ \fB-v\fR ]  [ \fB-A\fR ]  [ \fB-P \fIprefix\fB\fR ]  [ \fB-w\fR ]  [ \fB\fIversion\fB\fR ] 
+.sp
+\fBdepmod\fR [ \fB-e\fR ]  [ \fB-E \fIModule.symvers\fB\fR ]  [ \fB-F \fISystem.map\fB\fR ]  [ \fB-m\fR ]  [ \fB-n\fR ]  [ \fB-v\fR ]  [ \fB-P \fIprefix\fB\fR ]  [ \fB-w [   [ \fIversion\fB ] 
+ [ \fIfilename\fB\fI...\fB ] 
+ ] \fR ] 
+.SH "DESCRIPTION"
+.PP
+Linux kernel modules can provide services (called "symbols") for
+other modules to use (using one of the EXPORT_SYMBOL variants in the
+code). If a second module uses this symbol, that second module clearly
+depends on the first module. These dependencies can get quite complex.
+.PP
+\fBdepmod\fR creates a list of module dependencies
+by reading each module under
+\fI/lib/modules/\fR\fIversion\fR 
+and determining what symbols it exports and what symbols it
+needs. By default, this list is written to
+\fImodules.dep\fR, and a binary hashed version named
+\fImodules.dep.bin\fR, in the same directory. If
+filenames are given on the command line, only those modules are
+examined (which is rarely useful unless all modules are listed).
+\fBdepmod\fR also creates a list of symbols provided
+by modules in the file named \fImodules.symbols\fR
+and its binary hashed version, \fImodules.symbols.bin\fR\&.
+Finally, \fBdepmod\fR will output a file named
+\fImodules.devname\fR if modules supply special
+device names (devname) that should be populated in /dev on boot
+(by a utility such as udev).
+.PP
+If a \fIversion\fR is provided, then that
+kernel version's module directory is used rather than the
+current kernel version (as returned by \fBuname -r\fR).
+.PP
+\fBdepmod\fR will also generate various legacy map
+files in the output directory for use by the older hotplug
+infrastructure. These map files are largely deprecated.
+.SH "OPTIONS"
+.TP
+\fB-a --all\fR
+Probe all modules. This option is enabled by default if no
+file names are given in the command-line.
+.TP
+\fB-A --quick\fR
+This option scans to see if any modules are newer than the
+\fImodules.dep\fR file before any work is done:
+if not, it silently exits rather than regenerating the files.
+.TP
+\fB-b \fIbasedir\fB --basedir \fIbasedir\fB\fR
+If your modules are not currently in the (normal)
+directory
+\fI/lib/modules/\fR\fIversion\fR,
+but in a staging area, you can specify a
+\fIbasedir\fR which is prepended to
+the directory name. This
+\fIbasedir\fR is stripped from the
+resulting \fImodules.dep\fR file, so it
+is ready to be moved into the normal location. Use this option
+if you are a distribution vendor who needs to pre-generate the
+meta-data files rather than running depmod again later.
+.TP
+\fB-C --config \fIfile or directory\fB\fR
+This option overrides the default configuration file at
+\fI/etc/depmod.conf\fR (or the 
+\fI/etc/depmod.d/\fR directory if that is not found).
+.TP
+\fB-e --errsyms\fR
+When combined with the \fB-F\fR option, this
+reports any symbols which a module needs which are not
+supplied by other modules or the kernel. Normally, any
+symbols not provided by modules are assumed to be
+provided by the kernel (which should be true in a
+perfect world), but this assumption can break espencially
+when additionally updated third party drivers are not
+correctly installed or were built incorrectly.
+.TP
+\fB-E --symvers\fR
+When combined with the \fB-e\fR option, this
+reports any symbol versions supplied by modules that do
+not match with the symbol versions provided by the
+kernel in its \fIModule.symvers\fR\&.
+This option is mutually incompatible with \fB-F\fR\&.
+.TP
+\fB-F --filesyms \fISystem.map\fB\fR
+Supplied with the \fISystem.map\fR produced
+when the kernel was built, this allows the
+\fB-e\fR option to report unresolved symbols.
+This option is mutually incompatible with \fB-E\fR\&.
+.TP
+\fB-h --help\fR
+Print the help message and exit.
+.TP
+\fB-m\fR
+This overrides any possible configuration file setting of
+\fBmake_map_files\fR and forces the generation
+of legacy map files, such as \fImodules.pcimap\fR\&.
+.TP
+\fB-n --dry-run\fR
+This sends the resulting modules.dep and the various
+map files to standard output rather than writing them into
+the module directory.
+.TP
+\fB-P\fR
+Some architectures prefix symbols with an extraneous character.
+This specifies a prefix character (for example '_') to ignore.
+.TP
+\fB-v --verbose\fR
+In verbose mode, \fBdepmod\fR will print (to stdout)
+all the symbols each module depends on and the module's file name
+which provides that symbol.
+.TP
+\fB-V --version\fR
+Show version of program and exit. See below for caveats when
+run on older kernels.
+.TP
+\fB-w\fR
+Warn on duplicate dependencies, aliases, symbol versions, etc.
+.SH "COPYRIGHT"
+.PP
+This manual page originally Copyright 2002, Rusty Russell,
+IBM Corporation. Portions Copyright Jon Masters, and others.
+.SH "SEE ALSO"
+.PP
+\fBdepmod.conf\fR(5),
+\fBdepmod.d\fR(5),
+\fBmodprobe\fR(8),
+\fBmodules.dep\fR(5)
diff -Naur module-init-tools-3.16.orig/build/depmod.conf.5 module-init-tools-3.16/build/depmod.conf.5
--- module-init-tools-3.16.orig/build/depmod.conf.5	1970-01-01 00:00:00.000000000 +0000
+++ module-init-tools-3.16/build/depmod.conf.5	2011-10-10 20:51:22.103492175 +0000
@@ -0,0 +1,58 @@
+.\\" auto-generated by docbook2man-spec $Revision: 1.2 $
+.TH "DEPMOD.CONF" "5" "2010-03-01" "" ""
+.SH NAME
+depmod.conf, depmod.d \- Configuration file/directory for depmod
+.SH "DESCRIPTION"
+.PP
+The order in which modules are processed by the
+\fBdepmod\fR command can be altered on a global or
+per-module basis. This is typically useful in cases where built-in
+kernel modules are complemented by custom built versions of the
+same and the user wishes to affect the priority of processing in
+order to override the module version supplied by the kernel.
+.PP
+The format of \fIdepmod.conf\fR and files under \fIdepmod.d\fR is simple: one
+command per line, with blank lines and lines starting with '#'
+ignored (useful for adding comments). A '\\' at the end of a line
+causes it to continue on the next line, which makes the file a
+bit neater.
+.SH "COMMANDS"
+.TP
+\fBsearch \fIsubdirectory...\fB\fR
+This allows you to specify the order in which /lib/modules
+(or other configured module location) subdirectories will
+be processed by \fBdepmod\fR\&. Directories are
+listed in order, with the highest priority given to the
+first listed directory and the lowest priority given to the last
+directory listed. The special keyword \fBbuilt-in\fR 
+refers to the standard module directories installed by the kernel.
+
+By default, depmod will give a higher priority to 
+a directory with the name \fBupdates\fR
+using this built-in search string: "updates built-in"
+but more complex arrangements are possible and are
+used in several popular distributions.
+.TP
+\fBoverride \fImodulename\fB \fIkernelversion\fB \fImodulesubdirectory\fB\fR
+This command allows you to override which version of a
+specific module will be used when more than one module
+sharing the same name is processed by the
+\fBdepmod\fR command. It is possible to
+specify one kernel or all kernels using the * wildcard.
+\fImodulesubdirectory\fR is the
+name of the subdirectory under /lib/modules (or other
+module location) where the target module is installed.
+
+For example, it is possible to override the priority of
+an updated test module called \fBkmod\fR by
+specifying the following command: "override kmod * extra".
+This will ensure that any matching module name installed
+under the \fBextra\fR subdirectory within
+/lib/modules (or other module location) will take priority
+over any likenamed module already provided by the kernel.
+.SH "COPYRIGHT"
+.PP
+This manual page Copyright 2006-2010, Jon Masters, Red Hat, Inc.
+.SH "SEE ALSO"
+.PP
+\fBdepmod\fR(8)
diff -Naur module-init-tools-3.16.orig/build/depmod.d.5 module-init-tools-3.16/build/depmod.d.5
--- module-init-tools-3.16.orig/build/depmod.d.5	1970-01-01 00:00:00.000000000 +0000
+++ module-init-tools-3.16/build/depmod.d.5	2011-10-10 20:51:22.103492175 +0000
@@ -0,0 +1,58 @@
+.\\" auto-generated by docbook2man-spec $Revision: 1.2 $
+.TH "DEPMOD.CONF" "5" "2010-03-01" "" ""
+.SH NAME
+depmod.conf, depmod.d \- Configuration file/directory for depmod
+.SH "DESCRIPTION"
+.PP
+The order in which modules are processed by the
+\fBdepmod\fR command can be altered on a global or
+per-module basis. This is typically useful in cases where built-in
+kernel modules are complemented by custom built versions of the
+same and the user wishes to affect the priority of processing in
+order to override the module version supplied by the kernel.
+.PP
+The format of \fIdepmod.conf\fR and files under \fIdepmod.d\fR is simple: one
+command per line, with blank lines and lines starting with '#'
+ignored (useful for adding comments). A '\\' at the end of a line
+causes it to continue on the next line, which makes the file a
+bit neater.
+.SH "COMMANDS"
+.TP
+\fBsearch \fIsubdirectory...\fB\fR
+This allows you to specify the order in which /lib/modules
+(or other configured module location) subdirectories will
+be processed by \fBdepmod\fR\&. Directories are
+listed in order, with the highest priority given to the
+first listed directory and the lowest priority given to the last
+directory listed. The special keyword \fBbuilt-in\fR 
+refers to the standard module directories installed by the kernel.
+
+By default, depmod will give a higher priority to 
+a directory with the name \fBupdates\fR
+using this built-in search string: "updates built-in"
+but more complex arrangements are possible and are
+used in several popular distributions.
+.TP
+\fBoverride \fImodulename\fB \fIkernelversion\fB \fImodulesubdirectory\fB\fR
+This command allows you to override which version of a
+specific module will be used when more than one module
+sharing the same name is processed by the
+\fBdepmod\fR command. It is possible to
+specify one kernel or all kernels using the * wildcard.
+\fImodulesubdirectory\fR is the
+name of the subdirectory under /lib/modules (or other
+module location) where the target module is installed.
+
+For example, it is possible to override the priority of
+an updated test module called \fBkmod\fR by
+specifying the following command: "override kmod * extra".
+This will ensure that any matching module name installed
+under the \fBextra\fR subdirectory within
+/lib/modules (or other module location) will take priority
+over any likenamed module already provided by the kernel.
+.SH "COPYRIGHT"
+.PP
+This manual page Copyright 2006-2010, Jon Masters, Red Hat, Inc.
+.SH "SEE ALSO"
+.PP
+\fBdepmod\fR(8)
diff -Naur module-init-tools-3.16.orig/build/insmod.8 module-init-tools-3.16/build/insmod.8
--- module-init-tools-3.16.orig/build/insmod.8	1970-01-01 00:00:00.000000000 +0000
+++ module-init-tools-3.16/build/insmod.8	2011-10-10 20:51:22.103492175 +0000
@@ -0,0 +1,30 @@
+.\\" auto-generated by docbook2man-spec $Revision: 1.2 $
+.TH "INSMOD" "8" "2010-03-01" "" ""
+.SH NAME
+insmod \- simple program to insert a module into the Linux Kernel
+.SH SYNOPSIS
+.sp
+\fBinsmod\fR [ \fB\fIfilename\fB\fR ]  [ \fB\fImodule options\fB\fR\fI...\fR ] 
+.SH "DESCRIPTION"
+.PP
+\fBinsmod\fR is a trivial program to insert a
+module into the kernel: if the
+\fIfilename\fR is a hyphen, the module is
+taken from standard input. Most users will want to use
+\fBmodprobe\fR(8) instead, which is
+more clever and can handle module dependencies.
+.PP
+Only the most general of error messages are reported: as the
+work of trying to link the module is now done inside the kernel,
+the \fBdmesg\fR usually gives more information
+about errors.
+.SH "COPYRIGHT"
+.PP
+This manual page originally Copyright 2002, Rusty Russell, IBM
+Corporation. Maintained by Jon Masters and others.
+.SH "SEE ALSO"
+.PP
+\fBmodprobe\fR(8),
+\fBrmmod\fR(8),
+\fBlsmod\fR(8)
+\fBmodinfo\fR(8)
diff -Naur module-init-tools-3.16.orig/build/lsmod.8 module-init-tools-3.16/build/lsmod.8
--- module-init-tools-3.16.orig/build/lsmod.8	1970-01-01 00:00:00.000000000 +0000
+++ module-init-tools-3.16/build/lsmod.8	2011-10-10 20:51:22.103492175 +0000
@@ -0,0 +1,21 @@
+.\\" auto-generated by docbook2man-spec $Revision: 1.2 $
+.TH "LSMOD" "8" "2010-03-01" "" ""
+.SH NAME
+lsmod \- program to show the status of modules in the Linux Kernel
+.SH SYNOPSIS
+.sp
+\fBlsmod\fR
+.SH "DESCRIPTION"
+.PP
+\fBlsmod\fR is a trivial program which nicely
+formats the contents of the \fI/proc/modules\fR,
+showing what kernel modules are currently loaded.
+.SH "COPYRIGHT"
+.PP
+This manual page originally Copyright 2002, Rusty Russell, IBM
+Corporation. Maintained by Jon Masters and others.
+.SH "SEE ALSO"
+.PP
+\fBinsmod\fR(8),
+\fBmodprobe\fR(8),
+\fBmodinfo\fR(8)
diff -Naur module-init-tools-3.16.orig/build/modinfo.8 module-init-tools-3.16/build/modinfo.8
--- module-init-tools-3.16.orig/build/modinfo.8	1970-01-01 00:00:00.000000000 +0000
+++ module-init-tools-3.16/build/modinfo.8	2011-10-10 20:51:22.103492175 +0000
@@ -0,0 +1,72 @@
+.\\" auto-generated by docbook2man-spec $Revision: 1.2 $
+.TH "MODINFO" "8" "2010-03-01" "" ""
+.SH NAME
+modinfo \- program to show information about a Linux Kernel module
+.SH SYNOPSIS
+.sp
+\fBmodinfo\fR [ \fB-0\fR ]  [ \fB-F \fIfield\fB\fR ]  [ \fB-k \fIkernel\fB\fR ]  [ \fBmodulename|filename\fR\fI...\fR ] 
+.sp
+\fBmodinfo -V\fR
+.sp
+\fBmodinfo -h\fR
+.SH "DESCRIPTION"
+.PP
+\fBmodinfo\fR extracts information from the Linux
+Kernel modules given on the command line. If the module name is
+not a filename, then the
+\fI/lib/modules/\fR\fIversion\fR
+directory is searched, as is also done by
+\fBmodprobe\fR(8) when loading kernel modules.
+.PP
+\fBmodinfo\fR by default lists each attribute
+of the module in form \fIfieldname\fR :
+\fIvalue\fR, for easy reading. The
+filename is listed the same way (although it's not really an
+attribute).
+.PP
+This version of \fBmodinfo\fR can understand
+modules of any Linux Kernel architecture.
+.SH "OPTIONS"
+.TP
+\fB-V --version\fR
+Print the modinfo version.
+.TP
+\fB-F --field\fR
+Only print this field value, one per line. This is most
+useful for scripts. Field names are case-insenitive.
+Common fields (which may not be in every module) include
+author, description,
+license, parm,
+depends, and alias\&.
+There are often multiple parm,
+alias and depends
+fields. The special field filename
+lists the filename of the module.
+.TP
+\fB-k \fIkernel\fB\fR
+Provide information about a kernel other than the running one. This
+is particularly useful for distributions needing to extract
+information from a newly installed (but not yet running) set of
+kernel modules. For example, you wish to find which firmware files
+are needed by various modules in a new kernel for which you must
+make an initrd/initramfs image prior to booting.
+.TP
+\fB-0 --null\fR
+Use the ASCII zero character to separate field values,
+instead of a new line. This is useful for scripts, since
+a new line can theoretically appear inside a field.
+.TP
+\fB-a -d -l -p -n\fR
+These are shortcuts for author,
+description,
+license\&. parm and
+filename respectively, to ease the
+transition from the old modutils
+\fBmodinfo\fR\&.
+.SH "COPYRIGHT"
+.PP
+This manual page originally Copyright 2003, Rusty Russell, IBM
+Corporation. Maintained by Jon Masters and others.
+.SH "SEE ALSO"
+.PP
+\fBmodprobe\fR(8)
diff -Naur module-init-tools-3.16.orig/build/modprobe.8 module-init-tools-3.16/build/modprobe.8
--- module-init-tools-3.16.orig/build/modprobe.8	1970-01-01 00:00:00.000000000 +0000
+++ module-init-tools-3.16/build/modprobe.8	2011-10-10 20:51:22.103492175 +0000
@@ -0,0 +1,252 @@
+.\\" auto-generated by docbook2man-spec $Revision: 1.2 $
+.TH "MODPROBE" "8" "2010-03-01" "" ""
+.SH NAME
+modprobe \- program to add and remove modules from the Linux Kernel
+.SH SYNOPSIS
+.sp
+\fBmodprobe\fR [ \fB-v\fR ]  [ \fB-V\fR ]  [ \fB-C \fIconfig-file\fB\fR ]  [ \fB-n\fR ]  [ \fB-i\fR ]  [ \fB-q\fR ]  [ \fB-b\fR ]  [ \fB\fImodulename\fB\fR ]  [ \fB\fImodule parameters\fB\fR\fI...\fR ] 
+.sp
+\fBmodprobe\fR [ \fB-r\fR ]  [ \fB-v\fR ]  [ \fB-n\fR ]  [ \fB-i\fR ]  [ \fB\fImodulename\fB\fR\fI...\fR ] 
+.sp
+\fBmodprobe\fR [ \fB-l\fR ]  [ \fB-t \fIdirname\fB\fR ]  [ \fB\fIwildcard\fB\fR ] 
+.sp
+\fBmodprobe\fR [ \fB-c\fR ] 
+.sp
+\fBmodprobe\fR [ \fB--dump-modversions\fR ]  [ \fB\fIfilename\fB\fR ] 
+.SH "DESCRIPTION"
+.PP
+\fBmodprobe\fR intelligently adds or removes a
+module from the Linux kernel: note that for convenience, there
+is no difference between _ and - in module names (automatic
+underscore conversion is performed).
+\fBmodprobe\fR looks in the module directory
+\fI/lib/modules/`uname -r`\fR for all
+the modules and other files, except for the optional
+\fI/etc/modprobe.conf\fR configuration file and
+\fI/etc/modprobe.d\fR directory
+(see \fBmodprobe.conf\fR(5)). \fBmodprobe\fR will also use module
+options specified on the kernel command line in the form of
+<module>\&.<option>\&.
+.PP
+Note that unlike in 2.4 series Linux kernels (which are not supported
+by this tool) this version of \fBmodprobe\fR does not
+do anything to the module itself: the work of resolving symbols
+and understanding parameters is done inside the kernel. So
+module failure is sometimes accompanied by a kernel message: see
+\fBdmesg\fR(8)\&.
+.PP
+\fBmodprobe\fR expects an up-to-date
+\fImodules.dep.bin\fR file (or fallback human
+readable \fImodules.dep\fR file), as generated
+by the corresponding \fBdepmod\fR utility shipped
+along with \fBmodprobe\fR (see
+\fBdepmod\fR(8)). This file lists what other modules each
+module needs (if any), and \fBmodprobe\fR uses this
+to add or remove these dependencies automatically.
+.PP
+If any arguments are given after the
+\fImodulename\fR, they are passed to the
+kernel (in addition to any options listed in the configuration
+file).
+.SH "OPTIONS"
+.TP
+\fB-a --all\fR
+Insert all module names on the command line.
+.TP
+\fB-b --use-blacklist\fR
+This option causes \fBmodprobe\fR to apply the
+\fBblacklist\fR commands in the configuration files
+(if any) to module names as well. It is usually used by
+\fBudev\fR(7)\&.
+.TP
+\fB-C --config\fR
+This option overrides the default configuration directory/file
+(\fI/etc/modprobe.d\fR or 
+\fI/etc/modprobe.conf\fR).
+
+This option is passed through \fBinstall\fR
+or \fBremove\fR commands to other
+\fBmodprobe\fR commands in the
+MODPROBE_OPTIONS environment variable.
+.TP
+\fB-c --showconfig\fR
+Dump out the effective configuration from the config directory
+and exit.
+.TP
+\fB--dump-modversions\fR
+Print out a list of module versioning information required by a
+module. This option is commonly used by distributions in order to
+package up a Linux kernel module using module versioning deps.
+.TP
+\fB-d --dirname\fR
+Directory where modules can be found,
+\fI/lib/modules/RELEASE\fR
+by default.
+.TP
+\fB--first-time\fR
+Normally, \fBmodprobe\fR will succeed (and do
+nothing) if told to insert a module which is already
+present or to remove a module which isn't present. This is
+ideal for simple scripts; however, more complicated scripts often
+want to know whether \fBmodprobe\fR really
+did something: this option makes modprobe fail in the
+case that it actually didn't do anything.
+.TP
+\fB--force-vermagic\fR
+Every module contains a small string containing important
+information, such as the kernel and compiler versions. If
+a module fails to load and the kernel complains that the
+"version magic" doesn't match, you can use this option to
+remove it. Naturally, this check is there for your
+protection, so this using option is dangerous unless
+you know what you're doing.
+
+This applies to any modules inserted: both the module (or
+alias) on the command line and any modules on which it depends.
+.TP
+\fB--force-modversion\fR
+When modules are compiled with CONFIG_MODVERSIONS set, a
+section detailing the versions of every interfaced used
+by (or supplied by) the module is created. If a
+module fails to load and the kernel complains that the
+module disagrees about a version of some interface, you
+can use "--force-modversion" to remove the version
+information altogether. Naturally, this check is there
+for your protection, so using this option is dangerous
+unless you know what you're doing.
+
+This applies any modules inserted: both the module (or
+alias) on the command line and any modules on which it depends.
+.TP
+\fB-f --force\fR
+Try to strip any versioning information from the module
+which might otherwise stop it from loading: this is the
+same as using both \fB--force-vermagic\fR and
+\fB--force-modversion\fR\&. Naturally, these
+checks are there for your protection, so using this option
+is dangerous unless you know what you are doing.
+
+This applies to any modules inserted: both the module (or
+alias) on the command line and any modules it on which it depends.
+.TP
+\fB-i --ignore-install --ignore-remove\fR
+This option causes \fBmodprobe\fR to
+ignore \fBinstall\fR and
+\fBremove\fR commands in the
+configuration file (if any) for the module specified on the
+command line (any dependent modules are still subject
+to commands set for them in the configuration file). Both
+\fBinstall\fR and \fBremove\fR
+commands will currently be ignored when this option is used
+regardless of whether the request was more specifically
+made with only one or other (and not both) of
+\fB--ignore-install\fR or
+\fB--ignore-remove\fR\&.
+See \fBmodprobe.conf\fR(5)\&.
+.TP
+\fB-l --list\fR
+List all modules matching the given wildcard (or "*"
+if no wildcard is given). This option is provided for
+backwards compatibility and may go away in future: see
+\fBfind\fR(1) and
+\fBbasename\fR(1) for a more flexible alternative.
+.TP
+\fB-n --dry-run\fR
+This option does everything but actually insert or
+delete the modules (or run the install or remove
+commands). Combined with \fB-v\fR, it is
+useful for debugging problems. For historical reasons
+both \fB--dry-run\fR and \fB--show\fR
+actually mean the same thing and are interchangeable.
+.TP
+\fB-q --quiet\fR
+With this flag, \fBmodprobe\fR won't print an error
+message if you try to remove or insert a module it can't find (and
+isn't an alias or
+\fBinstall\fR/\fBremove\fR command).
+However, it will still return with a non-zero exit status. The
+kernel uses this to opportunistically probe for modules which might
+exist using request_module.
+.TP
+\fB-R --resolve-alias\fR
+Print all module names matching an alias. This can be useful
+for debugging module alias problems.
+.TP
+\fB-r --remove\fR
+This option causes \fBmodprobe\fR to remove
+rather than insert a module. If the modules it depends on
+are also unused, \fBmodprobe\fR will try to
+remove them too. Unlike insertion, more than one module
+can be specified on the command line (it does not make
+sense to specify module parameters when removing modules).
+
+There is usually no reason to remove modules, but some
+buggy modules require it. Your distribution kernel may not
+have been built to support removal of modules at all.
+.TP
+\fB-S --set-version\fR
+Set the kernel version, rather than using
+\fBuname\fR(2) to decide on the kernel version (which dictates where to
+find the modules).
+.TP
+\fB--show-depends\fR
+List the dependencies of a module (or alias), including
+the module itself. This produces a (possibly empty) set
+of module filenames, one per line, each starting with
+"insmod" and is typically used by distributions to determine
+which modules to include when generating initrd/initramfs images.
+\fBInstall\fR commands which apply are shown prefixed by
+"install". It does not run any of the install commands. Note that
+\fBmodinfo\fR(8)
+can be used to extract dependencies of a module from the
+module itself, but knows nothing of aliases or install commands.
+.TP
+\fB-s --syslog\fR
+This option causes any error messages to go through the
+syslog mechanism (as LOG_DAEMON with level LOG_NOTICE)
+rather than to standard error. This is also automatically
+enabled when stderr is unavailable.
+
+This option is passed through \fBinstall\fR
+or \fBremove\fR commands to other
+\fBmodprobe\fR commands in the
+MODPROBE_OPTIONS environment variable.
+.TP
+\fB-t --type\fR
+Restrict \fB-l\fR to modules
+in directories matching the
+\fIdirname\fR given. This option
+is provided for backwards compatibility and may go
+away in future: see
+\fBfind\fR(1)
+and
+\fBbasename\fR(1) for a more flexible alternative.
+.TP
+\fB-V --version\fR
+Show version of program and exit.
+.TP
+\fB-v --verbose\fR
+Print messages about what the program is doing. Usually
+\fBmodprobe\fR only prints messages if
+something goes wrong.
+
+This option is passed through \fBinstall\fR
+or \fBremove\fR commands to other
+\fBmodprobe\fR commands in the
+MODPROBE_OPTIONS environment variable.
+.SH "ENVIRONMENT"
+.PP
+The MODPROBE_OPTIONS environment variable can also be used to
+pass arguments to \fBmodprobe\fR\&.
+.SH "COPYRIGHT"
+.PP
+This manual page originally Copyright 2002, Rusty Russell, IBM
+Corporation. Maintained by Jon Masters and others.
+.SH "SEE ALSO"
+.PP
+\fBmodprobe.conf\fR(5),
+\fBmodprobe.d\fR(5),
+\fBinsmod\fR(8),
+\fBrmmod\fR(8),
+\fBlsmod\fR(8),
+\fBmodinfo\fR(8)
diff -Naur module-init-tools-3.16.orig/build/modprobe.conf.5 module-init-tools-3.16/build/modprobe.conf.5
--- module-init-tools-3.16.orig/build/modprobe.conf.5	1970-01-01 00:00:00.000000000 +0000
+++ module-init-tools-3.16/build/modprobe.conf.5	2011-10-10 20:51:22.103492175 +0000
@@ -0,0 +1,148 @@
+.\\" auto-generated by docbook2man-spec $Revision: 1.2 $
+.TH "MODPROBE.CONF" "5" "2010-03-09" "" ""
+.SH NAME
+modprobe.d, modprobe.conf \- Configuration directory/file for modprobe
+.SH "DESCRIPTION"
+.PP
+Because the \fBmodprobe\fR command can add or
+remove more than one module, due to modules having dependencies,
+we need a method of specifying what options are to be used with
+those modules. All files underneath the 
+\fI/etc/modprobe.d\fR directory which end with the
+\fI\&.conf\fR extension specify those options as
+required. (the \fI/etc/modprobe.conf\fR file can
+also be used if it exists, but that will be removed in a future 
+version). They can also be used to create convenient aliases: 
+alternate names for a module, or they can override the normal 
+\fBmodprobe\fR behavior altogether for those with 
+special requirements (such as inserting more than one module).
+.PP
+Note that module and alias names (like other module names) can
+have - or _ in them: both are interchangable throughout all the
+module commands as underscore conversion happens automatically.
+.PP
+The format of and files under \fImodprobe.d\fR and
+\fI/etc/modprobe.conf\fR is simple: one
+command per line, with blank lines and lines starting with '#'
+ignored (useful for adding comments). A '\\' at the end of a line
+causes it to continue on the next line, which makes the file a
+bit neater.
+.SH "COMMANDS"
+.TP
+\fBalias \fIwildcard\fB \fImodulename\fB\fR
+This allows you to give alternate names for a module. For
+example: "alias my-mod really_long_modulename"
+means you can use "modprobe my-mod" instead of "modprobe
+really_long_modulename". You can also use shell-style
+wildcards, so "alias my-mod* really_long_modulename"
+means that "modprobe my-mod-something" has the same
+effect. You can't have aliases to other aliases (that
+way lies madness), but aliases can have options, which
+will be added to any other options.
+
+Note that modules can also contain their own aliases,
+which you can see using \fBmodinfo\fR\&. These
+aliases are used as a last resort (ie. if there is no real
+module, \fBinstall\fR,
+\fBremove\fR, or \fBalias\fR
+command in the configuration).
+.TP
+\fBblacklist \fImodulename\fB\fR
+Modules can contain their own aliases: usually these are
+aliases describing the devices they support, such as
+"pci:123...". These "internal" aliases can be overridden
+by normal "alias" keywords, but there are cases where two
+or more modules both support the same devices, or a module
+invalidly claims to support a device that it does not: the
+\fBblacklist\fR keyword indicates that all of
+that particular module's internal aliases are to be ignored.
+.TP
+\fBinstall \fImodulename\fB \fIcommand...\fB\fR
+This command instructs \fBmodprobe\fR to run your
+command instead of inserting the module in the kernel as normal.
+The command can be any shell command: this allows you to do any
+kind of complex processing you might wish. For example, if the
+module "fred" works better with the module "barney"
+already installed (but it doesn't depend on it, so
+\fBmodprobe\fR won't automatically load it),
+you could say "install fred /sbin/modprobe barney;
+/sbin/modprobe --ignore-install fred", which would do what
+you wanted. Note the \fB--ignore-install\fR,
+which stops the second \fBmodprobe\fR from
+running the same \fBinstall\fR command again.
+See also \fBremove\fR below.
+
+The long term future of this command as a solution to the
+problem of providing additional module dependencies is not assured
+and it is intended to replace this command with a warning about
+its eventual removal or deprecation at some point in a future
+release. Its use complicates the automated determination of module
+dependencies by distribution utilities, such as mkinitrd (because
+these now need to somehow interpret what the
+\fBinstall\fR commands might be doing.
+In a perfect world, modules would provide all dependency
+information without the use of this command and work is underway
+to implement soft dependency support within the Linux kernel.
+
+If you use the string "$CMDLINE_OPTS" in the command, it
+will be replaced by any options specified on the modprobe
+command line. This can be useful because users expect
+"modprobe fred opt=1" to pass the "opt=1" arg to the
+module, even if there's an install command in the
+configuration file. So our above example becomes "install
+fred /sbin/modprobe barney; /sbin/modprobe
+--ignore-install fred $CMDLINE_OPTS"
+.TP
+\fBoptions \fImodulename\fB \fIoption...\fB\fR
+This command allows you to add options to the module
+\fImodulename\fR (which might be an
+alias) every time it is inserted into the kernel: whether
+directly (using \fBmodprobe\fR 
+\fImodulename\fR or because the
+module being inserted depends on this module.
+
+All options are added together: they can come from an
+\fBoption\fR for the module itself, for an
+alias, and on the command line.
+.TP
+\fBremove \fImodulename\fB \fIcommand...\fB\fR
+This is similar to the \fBinstall\fR command
+above, except it is invoked when "modprobe -r" is run.
+.TP
+\fBsoftdep \fImodulename\fB pre: \fImodules...\fB post: \fImodules...\fB\fR
+The \fBsoftdep\fR command allows you to specify soft,
+or optional, module dependencies. \fImodulename\fR
+can be used without these optional modules installed, but usually with
+some features missing. For example, a driver for a storage HBA might
+require another module be loaded in order to use management features.
+
+pre-deps and post-deps modules are lists of names and/or aliases of other
+modules that modprobe will attempt to install (or remove) in order
+before and after the main module given in the
+\fImodulename\fR argument.
+
+Example: Assume "softdep c pre: a b post: d e" is provided in the
+configuration. Running "modprobe c" is now equivalent to
+"modprobe a b c d e" without the softdep.
+Flags such as --use-blacklist are applied to all the specified
+modules, while module parameters only apply to module c.
+
+Note: if there are \fBinstall\fR or
+\fBremove\fR commands with the same
+\fImodulename\fR argument,
+\fBsoftdep\fR takes precedence.
+.SH "COMPATIBILITY"
+.PP
+A future version of module-init-tools will come with a strong warning
+to avoid use of the \fBinstall\fR as explained above. This
+will happen once support for soft dependencies in the kernel is complete.
+That support will complement the existing softdep support within this
+utility by providing such dependencies directly within the modules.
+.SH "COPYRIGHT"
+.PP
+This manual page originally Copyright 2004, Rusty Russell, IBM
+Corporation. Maintained by Jon Masters and others.
+.SH "SEE ALSO"
+.PP
+\fBmodprobe\fR(8),
+\fBmodules.dep\fR(5)
diff -Naur module-init-tools-3.16.orig/build/modprobe.d.5 module-init-tools-3.16/build/modprobe.d.5
--- module-init-tools-3.16.orig/build/modprobe.d.5	1970-01-01 00:00:00.000000000 +0000
+++ module-init-tools-3.16/build/modprobe.d.5	2011-10-10 20:51:22.103492175 +0000
@@ -0,0 +1,148 @@
+.\\" auto-generated by docbook2man-spec $Revision: 1.2 $
+.TH "MODPROBE.CONF" "5" "2010-03-09" "" ""
+.SH NAME
+modprobe.d, modprobe.conf \- Configuration directory/file for modprobe
+.SH "DESCRIPTION"
+.PP
+Because the \fBmodprobe\fR command can add or
+remove more than one module, due to modules having dependencies,
+we need a method of specifying what options are to be used with
+those modules. All files underneath the 
+\fI/etc/modprobe.d\fR directory which end with the
+\fI\&.conf\fR extension specify those options as
+required. (the \fI/etc/modprobe.conf\fR file can
+also be used if it exists, but that will be removed in a future 
+version). They can also be used to create convenient aliases: 
+alternate names for a module, or they can override the normal 
+\fBmodprobe\fR behavior altogether for those with 
+special requirements (such as inserting more than one module).
+.PP
+Note that module and alias names (like other module names) can
+have - or _ in them: both are interchangable throughout all the
+module commands as underscore conversion happens automatically.
+.PP
+The format of and files under \fImodprobe.d\fR and
+\fI/etc/modprobe.conf\fR is simple: one
+command per line, with blank lines and lines starting with '#'
+ignored (useful for adding comments). A '\\' at the end of a line
+causes it to continue on the next line, which makes the file a
+bit neater.
+.SH "COMMANDS"
+.TP
+\fBalias \fIwildcard\fB \fImodulename\fB\fR
+This allows you to give alternate names for a module. For
+example: "alias my-mod really_long_modulename"
+means you can use "modprobe my-mod" instead of "modprobe
+really_long_modulename". You can also use shell-style
+wildcards, so "alias my-mod* really_long_modulename"
+means that "modprobe my-mod-something" has the same
+effect. You can't have aliases to other aliases (that
+way lies madness), but aliases can have options, which
+will be added to any other options.
+
+Note that modules can also contain their own aliases,
+which you can see using \fBmodinfo\fR\&. These
+aliases are used as a last resort (ie. if there is no real
+module, \fBinstall\fR,
+\fBremove\fR, or \fBalias\fR
+command in the configuration).
+.TP
+\fBblacklist \fImodulename\fB\fR
+Modules can contain their own aliases: usually these are
+aliases describing the devices they support, such as
+"pci:123...". These "internal" aliases can be overridden
+by normal "alias" keywords, but there are cases where two
+or more modules both support the same devices, or a module
+invalidly claims to support a device that it does not: the
+\fBblacklist\fR keyword indicates that all of
+that particular module's internal aliases are to be ignored.
+.TP
+\fBinstall \fImodulename\fB \fIcommand...\fB\fR
+This command instructs \fBmodprobe\fR to run your
+command instead of inserting the module in the kernel as normal.
+The command can be any shell command: this allows you to do any
+kind of complex processing you might wish. For example, if the
+module "fred" works better with the module "barney"
+already installed (but it doesn't depend on it, so
+\fBmodprobe\fR won't automatically load it),
+you could say "install fred /sbin/modprobe barney;
+/sbin/modprobe --ignore-install fred", which would do what
+you wanted. Note the \fB--ignore-install\fR,
+which stops the second \fBmodprobe\fR from
+running the same \fBinstall\fR command again.
+See also \fBremove\fR below.
+
+The long term future of this command as a solution to the
+problem of providing additional module dependencies is not assured
+and it is intended to replace this command with a warning about
+its eventual removal or deprecation at some point in a future
+release. Its use complicates the automated determination of module
+dependencies by distribution utilities, such as mkinitrd (because
+these now need to somehow interpret what the
+\fBinstall\fR commands might be doing.
+In a perfect world, modules would provide all dependency
+information without the use of this command and work is underway
+to implement soft dependency support within the Linux kernel.
+
+If you use the string "$CMDLINE_OPTS" in the command, it
+will be replaced by any options specified on the modprobe
+command line. This can be useful because users expect
+"modprobe fred opt=1" to pass the "opt=1" arg to the
+module, even if there's an install command in the
+configuration file. So our above example becomes "install
+fred /sbin/modprobe barney; /sbin/modprobe
+--ignore-install fred $CMDLINE_OPTS"
+.TP
+\fBoptions \fImodulename\fB \fIoption...\fB\fR
+This command allows you to add options to the module
+\fImodulename\fR (which might be an
+alias) every time it is inserted into the kernel: whether
+directly (using \fBmodprobe\fR 
+\fImodulename\fR or because the
+module being inserted depends on this module.
+
+All options are added together: they can come from an
+\fBoption\fR for the module itself, for an
+alias, and on the command line.
+.TP
+\fBremove \fImodulename\fB \fIcommand...\fB\fR
+This is similar to the \fBinstall\fR command
+above, except it is invoked when "modprobe -r" is run.
+.TP
+\fBsoftdep \fImodulename\fB pre: \fImodules...\fB post: \fImodules...\fB\fR
+The \fBsoftdep\fR command allows you to specify soft,
+or optional, module dependencies. \fImodulename\fR
+can be used without these optional modules installed, but usually with
+some features missing. For example, a driver for a storage HBA might
+require another module be loaded in order to use management features.
+
+pre-deps and post-deps modules are lists of names and/or aliases of other
+modules that modprobe will attempt to install (or remove) in order
+before and after the main module given in the
+\fImodulename\fR argument.
+
+Example: Assume "softdep c pre: a b post: d e" is provided in the
+configuration. Running "modprobe c" is now equivalent to
+"modprobe a b c d e" without the softdep.
+Flags such as --use-blacklist are applied to all the specified
+modules, while module parameters only apply to module c.
+
+Note: if there are \fBinstall\fR or
+\fBremove\fR commands with the same
+\fImodulename\fR argument,
+\fBsoftdep\fR takes precedence.
+.SH "COMPATIBILITY"
+.PP
+A future version of module-init-tools will come with a strong warning
+to avoid use of the \fBinstall\fR as explained above. This
+will happen once support for soft dependencies in the kernel is complete.
+That support will complement the existing softdep support within this
+utility by providing such dependencies directly within the modules.
+.SH "COPYRIGHT"
+.PP
+This manual page originally Copyright 2004, Rusty Russell, IBM
+Corporation. Maintained by Jon Masters and others.
+.SH "SEE ALSO"
+.PP
+\fBmodprobe\fR(8),
+\fBmodules.dep\fR(5)
diff -Naur module-init-tools-3.16.orig/build/modules.dep.5 module-init-tools-3.16/build/modules.dep.5
--- module-init-tools-3.16.orig/build/modules.dep.5	1970-01-01 00:00:00.000000000 +0000
+++ module-init-tools-3.16/build/modules.dep.5	2011-10-10 20:51:22.104286437 +0000
@@ -0,0 +1,30 @@
+.\\" auto-generated by docbook2man-spec $Revision: 1.2 $
+.TH "MODULES.DEP" "5" "2010-03-01" "" ""
+.SH NAME
+modules.dep.bin, modules.dep \- Module dependency information
+.SH "DESCRIPTION"
+.PP
+The \fImodules.dep.bin\fR as generated by
+module-init-tools \fBdepmod\fR, lists the
+dependencies for every module in the directories under
+\fI/lib/modules/\fR\fIversion\fR,
+where \fImodules.dep.bin\fR (or the human readable
+version \fImodules.dep\fR) is also located. It is
+used by utilities such as \fBmodprobe\fR\&. The
+binary version will be used by default, if it was generated by
+a compatible version of \fBdepmod\fR, with fallback
+to the generic \fImodules.dep\fR\&.
+.PP
+These files are not intended for editing or use by any additional
+utilities as their format is subject to change in the future. You
+should use the
+\fBmodinfo\fR(8) command to obtain information about modules in a future
+proof and compatible fashion rather than touching these files.
+.SH "COPYRIGHT"
+.PP
+This manual page originally Copyright 2002, Rusty Russell, IBM
+Corporation. Maintained by Jon Masters and others.
+.SH "SEE ALSO"
+.PP
+\fBdepmod\fR(8),
+\fBmodprobe\fR(8)
diff -Naur module-init-tools-3.16.orig/build/modules.dep.bin.5 module-init-tools-3.16/build/modules.dep.bin.5
--- module-init-tools-3.16.orig/build/modules.dep.bin.5	1970-01-01 00:00:00.000000000 +0000
+++ module-init-tools-3.16/build/modules.dep.bin.5	2011-10-10 20:51:22.104286437 +0000
@@ -0,0 +1,30 @@
+.\\" auto-generated by docbook2man-spec $Revision: 1.2 $
+.TH "MODULES.DEP" "5" "2010-03-01" "" ""
+.SH NAME
+modules.dep.bin, modules.dep \- Module dependency information
+.SH "DESCRIPTION"
+.PP
+The \fImodules.dep.bin\fR as generated by
+module-init-tools \fBdepmod\fR, lists the
+dependencies for every module in the directories under
+\fI/lib/modules/\fR\fIversion\fR,
+where \fImodules.dep.bin\fR (or the human readable
+version \fImodules.dep\fR) is also located. It is
+used by utilities such as \fBmodprobe\fR\&. The
+binary version will be used by default, if it was generated by
+a compatible version of \fBdepmod\fR, with fallback
+to the generic \fImodules.dep\fR\&.
+.PP
+These files are not intended for editing or use by any additional
+utilities as their format is subject to change in the future. You
+should use the
+\fBmodinfo\fR(8) command to obtain information about modules in a future
+proof and compatible fashion rather than touching these files.
+.SH "COPYRIGHT"
+.PP
+This manual page originally Copyright 2002, Rusty Russell, IBM
+Corporation. Maintained by Jon Masters and others.
+.SH "SEE ALSO"
+.PP
+\fBdepmod\fR(8),
+\fBmodprobe\fR(8)
diff -Naur module-init-tools-3.16.orig/build/rmmod.8 module-init-tools-3.16/build/rmmod.8
--- module-init-tools-3.16.orig/build/rmmod.8	1970-01-01 00:00:00.000000000 +0000
+++ module-init-tools-3.16/build/rmmod.8	2011-10-10 20:51:22.104286437 +0000
@@ -0,0 +1,51 @@
+.\\" auto-generated by docbook2man-spec $Revision: 1.2 $
+.TH "RMMOD" "8" "2010-03-01" "" ""
+.SH NAME
+rmmod \- simple program to remove a module from the Linux Kernel
+.SH SYNOPSIS
+.sp
+\fBrmmod\fR [ \fB-f\fR ]  [ \fB-w\fR ]  [ \fB-s\fR ]  [ \fB-v\fR ]  [ \fB\fImodulename\fB\fR ] 
+.SH "DESCRIPTION"
+.PP
+\fBrmmod\fR is a trivial program to remove a
+module (when module unloading support is provided) from the kernel.
+Most users will want to use
+\fBmodprobe\fR(8) with the \fB-r\fR option instead.
+.SH "OPTIONS"
+.TP
+\fB-v --verbose\fR
+Print messages about what the program is doing.
+Usually \fBrmmod\fR prints messages
+only if something goes wrong.
+.TP
+\fB-f --force\fR
+This option can be extremely dangerous: it has no effect unless
+CONFIG_MODULE_FORCE_UNLOAD was set when the kernel was
+compiled. With this option, you can remove modules which are
+being used, or which are not designed to be removed, or have
+been marked as unsafe (see \fBlsmod\fR(8)).
+.TP
+\fB-w --wait\fR
+Normally, \fBrmmod\fR will refuse to
+unload modules which are in use. With this option,
+\fBrmmod\fR will isolate the module, and
+wait until the module is no longer used. Nothing new
+will be able to use the module, but it's up to you to
+make sure the current users eventually finish with it.
+See \fBlsmod\fR(8)) for information on usage counts.
+.TP
+\fB-s --syslog\fR
+Send errors to syslog instead of standard error.
+.TP
+\fB-V --version\fR
+Show version of program and exit.
+.SH "COPYRIGHT"
+.PP
+This manual page originally Copyright 2002, Rusty Russell, IBM
+Corporation. Maintained by Jon Masters and others.
+.SH "SEE ALSO"
+.PP
+\fBmodprobe\fR(8),
+\fBinsmod\fR(8),
+\fBlsmod\fR(8)
+\fBmodinfo\fR(8)

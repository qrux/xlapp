#! /bin/bash
set -e
set +h

usage() {
	cat <<EOF

Usage: $0 [OPTION]... target-FQDN [lfs-mount-point]

Creates an LFS-like config file using the following parameters:

  -u              Create domU config file (skip LFS params)
  -l part:type    LFS partition:fstype
  -p part:type    Host partition:fstype
  -b part:type    Boot partition:fstype
  -k "key"        SSH key
  -i a.b.c.d/p    IP address/prefix
  -g e.f.g.h"     Gateway
  -d fqdn         DNS server (can be given multiple times)
  -t fqdn         NTP server (can be given multiple times)
  -a lang         Lang (e.g. an entry from 'locale -a')
  -z tz           TZ (e.g. tzselect output)
  -j concurrency  MAKEFLAGS
  -n              NO-TESTS (build Chap6 without tests)
  -o file         Write output to 'file'
  -h              Usage (this information)

If this script is called with '-u', then the <lfs-mount-point>
argument, if given, is ignored.  If this script is called
without '-u'--i.e., for a XLAPP dom0 build--then lfs-mount-point
must be given.

EOF
	exit 1
}

echo "lfs-conf args: [ ${@} ]"

FOR_DOMU=
SKIP_TESTS=
OPTERR=0 # Disables getopts errors (when called by domU).
while getopts "l:p:b:v:fs:m:c:w:enuk:i:g:d:t:a:z:j:o:h" OPT ; do
	case "${OPT}" in
		u) FOR_DOMU=true;;
		l) XLAPP_LFS_PART="${OPTARG}";;
		p) XLAPP_HOST_PART="${OPTARG}";;
		b) XLAPP_BOOT_PART="${OPTARG}";;
		k) XLAPP_SSH_PUBKEY="${OPTARG}";;
		i) XLAPP_HOST_IP="${OPTARG}";;
		g) XLAPP_HOST_GW="${OPTARG}";;
		d) XLAPP_DNS_SERVERS="${XLAPP_DNS_SERVERS} ${OPTARG}";;
		t) XLAPP_NTP_SERVERS="${XLAPP_NTP_SERVERS} ${OPTARG}";;
		a) XLAPP_TARGET_LANG="${OPTARG}";;
		z) XLAPP_TARGET_TZ="${OPTARG}";;
		j) MAKEFLAGS="-j ${OPTARG}";;
		n) SKIP_TESTS=true;;
		o) OUTPUT_FILE="${OPTARG}";;
		h) usage;;
		*) if [ -z ${FOR_DOMU} ] ; then echo "Unrecognized option $OPT." ; fi;;
	esac
done
shift $(($OPTIND - 1))

# This arg is going to be there regardless of caller (xlapp or domU).
XLAPP_DNS_FQDN=$1

if [ -z $XLAPP_DNS_FQDN ] ; then
	echo "Requires target-FQDN as mandatory first argument (missing)."
	usage
fi

echo "For domU? ${FOR_DOMU}"

if [ -n "${FOR_DOMU}" ] ; then
	# If this is domU caller.
	BUILD_CONF="${XLAPP_DNS_FQDN}-config"
else
	# If this is xlapp caller (not domU).
	BUILD_CONF="machine.config"
	XLAPP_LFS=$2

	if [ -z $XLAPP_LFS ] ; then
		echo "Requires 2 arguments: target-FQDN and lfs-mount-point (missing)."
		usage
	fi

	if [ ! -d $XLAPP_LFS ] ; then
		echo "LFS target directory ($XLAPP_LFS) isn't a directory."
		usage
	fi

	if [ -z $XLAPP_HOST_PART ] ; then
		echo "Please specific the HOST partition (e.g., /dev/sda2)."
		usage
	fi

	if [ -z $XLAPP_LFS_PART ] ; then
		echo "Please specify the LFS partition (e.g., /dev/sda5)."
		usage
	fi

	if [ -z $XLAPP_BOOT_PART ] ; then
		echo "Please specify the BOOT partition (e.g., /dev/sda1)."
		usage
	fi

	XLAPP_HOST_FSTYPE=$(echo $XLAPP_HOST_PART | cut -d \: -f 2)
	if [ -z $XLAPP_HOST_FSTYPE ] ; then
		XLAPP_HOST_FSTYPE=ext4
	else
		XLAPP_HOST_PART=$(echo $XLAPP_HOST_PART | cut -d \: -f 1)
	fi

	if [ ! -b $XLAPP_HOST_PART ] ; then
		echo "HOST partition ($XLAPP_HOST_PART) is not a block device."
		usage
	fi

	XLAPP_LFS_FSTYPE=$(echo $XLAPP_LFS_PART | cut -d \: -f 2)
	if [ -z $XLAPP_LFS_FSTYPE ] ; then
		XLAPP_LFS_FSTYPE=ext4
	else
		XLAPP_LFS_PART=$(echo $XLAPP_LFS_PART | cut -d \: -f 1)
	fi

	if [ ! -b $XLAPP_LFS_PART ] ; then
		echo "LFS partition ($XLAPP_LFS_PART) is not a block device."
		usage
	fi

	XLAPP_BOOT_FSTYPE=$(echo $XLAPP_BOOT_PART | cut -d \: -f 2)
	if [ -z $XLAPP_BOOT_FSTYPE ] ; then
		XLAPP_BOOT_FSTYPE=ext4
	else
		XLAPP_BOOT_PART=$(echo $XLAPP_BOOT_PART | cut -d \: -f 1)
	fi

	if [ ! -b $XLAPP_BOOT_PART ] ; then
		echo "BOOT partition ($XLAPP_BOOT_PART) is not a block device."
		usage
	fi

	INSTALL_INTO_BOOT=
	if [ "${XLAPP_BOOT_PART}" = "${XLAPP_LFS_PART}" ] ; then
		echo "Installing XLAPP into BOOT partition."
		INSTALL_INTO_BOOT=true
	fi
fi

# Make sure that IP was given in IP/prefix mode
if [ -z $XLAPP_HOST_IP ] ; then
	echo "Please specify the target IP address."
	usage
fi
set +e
echo $XLAPP_HOST_IP | grep -c / > /dev/null 2>&1
set -e
if [ 0 -ne $? ] ; then
	echo "Please enter the IP address in prefix notation (e.g., a.b.c.d/pre)."
	usage
fi

XLAPP_HOST_PREFIX=$(echo $XLAPP_HOST_IP | cut -d \/ -f 2)
set +e
test 0 -le $XLAPP_HOST_PREFIX -a 32 -ge $XLAPP_HOST_PREFIX > /dev/null 2>&1
if [ 0 -ne $? ] ; then
	echo "Please enter a valid prefix [0,32] as the netmask ($XLAPP_HOST_PREFIX)."
	usage
fi
set -e
XLAPP_HOST_IP=$(echo $XLAPP_HOST_IP | cut -d \/ -f 1)
if [ -z $XLAPP_HOST_IP ] ; then
	echo "Please specify the target IP address."
	usage
fi

if [ -z $XLAPP_HOST_GW ] ; then
	echo "Please specify the Default Gateway IP address."
	usage
fi

XLAPP_HOST_HOSTNAME=$(echo $XLAPP_DNS_FQDN | cut -d '.' -f 1)
XLAPP_DNS_DOMAIN_NAME=$(echo $XLAPP_DNS_FQDN | cut -d '.' -f 2-)

if [ -z $XLAPP_HOST_HOSTNAME ] ; then
	echo "The specified FQDN does not appear to be fully-qualified."
	usage
fi
if [ -z $XLAPP_DNS_DOMAIN_NAME ] ; then
	echo "The specified FQDN does not appear to be fully-qualified."
	usage
fi

# Set LANG/TZ if unspecified.
test -z $XLAPP_TARGET_LANG && XLAPP_TARGET_LANG="en_US.UTF-8"
test -z $XLAPP_TARGET_TZ && XLAPP_TARGET_TZ="America/Los_Angeles"

# Grab root password
rm -f passhash
gcc passhash.c -lcrypt -o passhash
_PASSWD="1"
_PASSWD2="2"
while [ "$_PASSWD" != "$_PASSWD2" ] ; do
	_PASS_SALT=$(date '+%M%S' | md5sum | cut -d ' ' -f 1 | cut -c 1-16)
	echo
	echo -n "What would you like as the new root password for LFS? "
	stty -echo && \
  	read _PASSWD
	stty echo && echo
	if [ -z $_PASSWD ] ; then
		echo "  [error] Empty password is not allowed for root; trying again."
		continue
	fi
	_PASSWD=$(./passhash $_PASSWD $_PASS_SALT)

	echo -n "       Please re-enter the new root password for LFS: "
	stty -echo && \
  	read _PASSWD2
	stty echo && echo
	if [ -z $_PASSWD2 ] ; then
		echo "    [error] No LFS root password confirmation given; try entering both again, please."
		continue
	fi
	_PASSWD2=$(./passhash $_PASSWD2 $_PASS_SALT)

	#
	# Check that the passwords match...
	#
	if [ "$_PASSWD" != "$_PASSWD2" ] ; then
		echo "    [error] New LFS root passwords don't match; retrying"
	else
		XLAPP_ROOT_PASSWD_HASH="$_PASSWD"
	fi
done
unset _PASSWD _PASSWD2

echo "BUILD_CONF (config file): ${BUILD_CONF}"

if [ -z "$FOR_DOMU" ] ; then
	cat >> $BUILD_CONF <<EOF
export XLAPP_LFS="${XLAPP_LFS}"

export XLAPP_HOST_PART="${XLAPP_HOST_PART}"
export XLAPP_LFS_PART="${XLAPP_LFS_PART}"
export XLAPP_BOOT_PART="${XLAPP_BOOT_PART}"

export XLAPP_HOST_FSTYPE="${XLAPP_HOST_FSTYPE}"
export XLAPP_LFS_FSTYPE="${XLAPP_LFS_FSTYPE}"
export XLAPP_BOOT_FSTYPE="${XLAPP_BOOT_FSTYPE}"
EOF
else
	touch $BUILD_CONF
fi

cat >> $BUILD_CONF <<EOF
export MAKEFLAGS="${MAKEFLAGS}"
export SKIP_TESTS="${SKIP_TESTS}"

export XLAPP_DNS_FQDN="${XLAPP_DNS_FQDN}"
export XLAPP_HOST_HOSTNAME="${XLAPP_HOST_HOSTNAME}"
export XLAPP_DNS_DOMAIN_NAME="${XLAPP_DNS_DOMAIN_NAME}"
export XLAPP_HOST_IP="${XLAPP_HOST_IP}"
export XLAPP_HOST_PREFIX="${XLAPP_HOST_PREFIX}"
export XLAPP_HOST_NETMASK="/${XLAPP_HOST_PREFIX}"
export XLAPP_HOST_GW="${XLAPP_HOST_GW}"
export XLAPP_DNS_SERVERS="${XLAPP_DNS_SERVERS}"
export XLAPP_NTP_SERVERS="${XLAPP_NTP_SERVERS}"

export XLAPP_TARGET_LANG="${XLAPP_TARGET_LANG}"
export XLAPP_TARGET_TZ="${XLAPP_TARGET_TZ}"

export XLAPP_CONF_DISTRO="Xen/LFS Apache Postgres PHP"
export XLAPP_CONF_DISTRO_CONTACT="qrux@xlapp.org"
export XLAPP_CONF_DISTRO_MINI="XLAPP"
export XLAPP_SSH_PUBKEY="${XLAPP_SSH_PUBKEY}"
export XLAPP_ROOT_PASSWD_HASH='${XLAPP_ROOT_PASSWD_HASH}'
EOF

. $BUILD_CONF

echo "################################################################"
echo "These are the settings..."
echo

cat <<EOF
         Installing LFS to: ${XLAPP_LFS}
                 MAKEFLAGS: ${MAKEFLAGS}
                SKIP_TESTS: ${SKIP_TESTS} (empty string implies 'no')

            HOST partition: ${XLAPP_HOST_PART}
             LFS partition: ${XLAPP_LFS_PART}
            BOOT partition: ${XLAPP_BOOT_PART}

      HOST filesystem type: ${XLAPP_HOST_FSTYPE}
       LFS filesystem type: ${XLAPP_LFS_FSTYPE}
      BOOT filesystem type: ${XLAPP_BOOT_FSTYPE}

                  New FQDN: ${XLAPP_DNS_FQDN}
             New host name: ${XLAPP_HOST_HOSTNAME}
           New domain name: ${XLAPP_DNS_DOMAIN_NAME}
                    New IP: ${XLAPP_HOST_IP}
                New prefix: ${XLAPP_HOST_PREFIX}
               New netmask: ${XLAPP_HOST_NETMASK}
               DNS servers: ${XLAPP_DNS_SERVERS}
               NTP servers: ${XLAPP_NTP_SERVERS}
           Default Gateway: ${XLAPP_HOST_GW}

                  Language: ${XLAPP_TARGET_LANG}
                  Timezone: ${XLAPP_TARGET_TZ}

                  "Distro": ${XLAPP_CONF_DISTRO}
          "Distro" (short): ${XLAPP_CONF_DISTRO_MINI}
          "Distro Contact": ${XLAPP_CONF_DISTRO_CONTACT}
            SSH Public Key: ${XLAPP_SSH_PUBKEY}
    Root Password (hashed): ${XLAPP_ROOT_PASSWD_HASH}
EOF
echo
echo "################################################################"
echo "#"
echo "# Configuration complete; data written to [ $BUILD_CONF ]."
echo "#"
echo "#   * To change, just run this script again."
echo "#"
echo "################################################################"

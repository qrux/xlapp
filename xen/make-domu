#! /bin/bash
set -e

totime()
{
	date '+%Y%m%d_%H%M%S'
}

nib2hex()
{
	local nib=$1
	if [ -z $nib ] ; then echo "No nibble given."; return 1 ; fi
	if [ 15 -lt $nib ] ; then echo "Nibble is greater than 15." ; return 1 ; fi
	case "$nib" in
		10) echo a;;
		11) echo b;;
		12) echo c;;
		13) echo d;;
		14) echo e;;
		15) echo f;;
		*) echo $nib;;
	esac
}

octet2hex()
{
	local octet=$1
	if [ -z $octet ] ; then echo "No octet given."; return 1 ; fi
	if [ 255 -lt $octet ] ; then echo "Octet is greater than 255." ; return 1 ; fi
	hi=$(($octet >> 4))
	low=$(($octet & 0x0f))
	echo "$(nib2hex ${hi})$(nib2hex ${low})"
}

usage()
{
	cat <<EOF

Usage: $0 [OPTION]... domU-FQDN xen-image-tarball

Creates a Xen PV domU using phy-backed (or file-backed) filesystem--and also
creates an xl-compatible configuration file in /etc/xen/vm.

The domU template image is specified in xen-image-tarball, and must be a
TAR-extractable file (gzip and bzip2 compression are supported, e.g.,
"domU-template.tar.gz" or "domU-template.tar.bz2").

This TAR archive must, when decompressed, have a top- level folder which is a
proxy for / (the root directory); i.e., the TAR archive must be extractable
using --strip-components=1.  Using an image which is not created as a snapshot
at the end of the X/LAPP Phase 1 build can results in an unusable domU.

VOL_GROUP must point to an existing LVM2 Volume Group.  Other logical-volume
management systems are not support at this time.  This is the preferred
mechanism for creating a disk device for use by the VM.  Using a loopback
disk-image for a PV domU is STRONGLY DISCOURAGED.

The 'type' sub-argument of -v must be one of ext2, ext3, ext4.  Others may
work, but are used entirely at your caution.  FSTYPE must support creation via
'mkfs -t FSTYPE'.  FSSIZE is expressed as GiB: multiples of 10^30 bytes.

VM_MEM is expressed as MiB: multiples of 1048576-bytes.  VM_CPUS
is expressed an integer number of VCPUS allocated for use by the VM.  Using a
value greater than the number of cores detected by dom0 can result in undefined
behavior.

SWAP_MUL is expressed as an integer multiple of VM_MEM.  For example, if VM_MEM
is set to 2048 (i.e., 2048 MB, or, 2 GB) and SWAP_MUL is set to 3, then a swap
device will be created for use by the VM that is 3 * 2048 MB (6144 MB, or 6 GB).

When complete, the logical-volume will be created with a working domU filesystem
written to it.  The xl-compatible configuration file will be written to
/etc/xen/vm (this dir will be created if it doesn't already exist).  The file
will be named by the domU-FQDN (first non-option argument).

  -v vg:type	Use volume group 'vg' (must exist) with FS type 'type'
                  (this option is mutually exclusive from -f)
  -f            Force the creation of the logical volume
  -2 FSSIZE     Create a filesystem this large (in GiB)
  -m VM_MEM     Allocate this much memory for the VM (in MiB)
  -c VM_CPUS    [OPT] Allocate this many CPUs for the VM
  -w SWAP_MUL	[OPT] Use this amount of swap (multiplier to VM_MEM)
  -n		Don't do any writing; just create the xl-conf file.
  -h            Usage (this information)
  -i            Usage: xlfs-conf

EOF
	exit 1
}

XLFS_CONF=xlfs-conf

# Clean up last invocation
test -e ${XLFS_CONF} || ln -s ../${XLFS_CONF} .
test -e passhash.c || ln -s ../passhash.c .

FSTYPE=ext3
unset FSSIZE
unset SWAP_MUL VIRT_MEM VIRT_SWAP VOL_GROUP FORCE_INIT
unset SKIP_ACTUAL
VIRT_ETH_COUNT=0
unset DOMU_HOST_IPS
while getopts "2:4:A:a:b:d:g:j:k:l:np:rS:s:t:uyz:c:fhim:ns:v:w:" OPT ; do
	case "$OPT" in
		c) VIRT_CPUS="$OPTARG";;
		f) FORCE_INIT=1;;
		h) usage;;
		i) ./${XLFS_CONF} -u -h;;
		m) VIRT_MEM="$OPTARG";;
		n) SKIP_ACTUAL=1;;
		2) FSSIZE="$OPTARG";;
		v) VOL_GROUP="$OPTARG";;
		w) SWAP_MUL="$OPTARG";;
		*) true;;
	esac
done

# Run config file (without changing parameters).
./${XLFS_CONF} -u "${@}"

# Shift off parameters.
shift $(($OPTIND - 1))
DOMU_HOST=$1

BUILD_CONF="${DOMU_HOST}-config"
DOMU_CONF_DIR="${DOMU_HOST}"

if [ -z $DOMU_CONF_DIR ] ; then
	echo "No domU config dir specified; aborting!"
	exit 2
fi

# Source output
echo "build config: $BUILD_CONF"
. $BUILD_CONF

# Test if we're on Linux and are a dom0
test ! -e /proc/cpuinfo && usage
test ! -d /proc/xen     && usage

VIRT_CPUS=$(cat /proc/cpuinfo | grep -cE "^processor\s+:")

if [ -z "$VOL_GROUP" ] ; then
	echo "Volume group must be specified with -v."
	exit 1
fi
if [ -z $VIRT_MEM ] ; then
	echo "VM_MEM must be specified for the PV domU; exiting."
	exit 1
fi
if [ -z $FSSIZE ] ; then
	echo "FSSIZE must be specified for the PV domU; exiting."
	exit 1
fi

# Set the amount of virtual memory for VM.
if [ -n "$SWAP_MUL" ] ; then
	VIRT_SWAP=$(($SWAP_MUL * $VIRT_MEM))
else
	unset VIRT_SWAP
fi

# Get the volume group and the fstype (if given).
FSTYPE=$(echo $VOL_GROUP | awk -F\: '{print $2}')
if [ -z $FSTYPE ] ; then
	FSTYPE=ext3
else
	VOL_GROUP=$(echo $VOL_GROUP | cut -d \: -f 1)
fi

# Insane TSC issue with EXT4 (this needs to be looked into).
if [ "ext4" = "${FSTYPE}" ] ; then
	TSC_MODE=2
else
	TSC_MODE=1
fi
# Xen 4.2.5 (on AMD) uses 'default' mode.
TSC_MODE="default"

DOMU_HOSTNAME=$(echo $DOMU_HOST | cut -d \. -f 1)
DOMAIN_NAME=$(echo $DOMU_HOST | cut -d \. -f 2-)

echo "           domU FQDN: $DOMU_HOST"
echo "           domU host: $DOMU_HOSTNAME"
echo "         domU domain: $DOMAIN_NAME"
echo "   domU source image: $SNAPSHOT"
echo "         domU LVM vg: $VOL_GROUP"
echo "domU disk size (GiB): $FSSIZE"
echo "        domU FS type: $FSTYPE"
echo "       domU TSC mode: $TSC_MODE"
echo "   domU memory (MiB): $VIRT_MEM"
echo "      domU CPU count: $VIRT_CPUS"
echo "    domU Swap amount: $VIRT_SWAP"

########################################################################
#
# Configuration
#
########################################################################

#VIRT_ETH_IDX=0
#VIRT_MACADDRS=""
#while [ $VIRT_ETH_IDX -le $VIRT_ETH_COUNT ] ; do
	#VIRT_MACADDR="$(echo $XLAPP_HOST_IP | awk -v eth=$VIRT_ETH_IDX -F \. '{printf("00:16:3e:%02x:%02x:%02x", eth, $3, $4);}')"
	#VIRT_MACADDRS="$VIRT_MACADDRS $VIRT_MACADDR"
	#VIRT_ETH_IDX=$((1 + $VIRT_ETH_IDX))
#done

#echo "    DomU -    Hostname? $DOMU_HOST"
#echo "    DomU -  DNS Domain? $DOMAIN_NAME"
#echo "    DomU -    Use swap? $XLAPP_DOMU_SWAP"
#echo "    DomU -          IP? $XLAPP_DOMU_HOST_IP"
#echo "    DomU -          GW? $XLAPP_DOMU_HOST_GW"
#echo "    DomU -      Prefix? $XLAPP_DOMU_HOST_PREFIX"
#echo "    DomU -   Broadcast? $XLAPP_DOMU_HOST_BCAST"
#echo "                Swap amount?: $VIRT_SWAP"
#echo "    domU Swap amount: $VIRT_SWAP"
#echo "                    :"
echo "      domU MAC addrs: $DOMU_MACADDRS"
echo "     domU config dir: $DOMU_CONF_DIR"

IMAGE=/dev/${VOL_GROUP}/$DOMU_HOST

#if [ -n "$SKIP_ACTUAL" ] ; then exit ; fi

if [ -z "$SKIP_ACTUAL" ] ; then # This block is only run if '-n' IS NOT GIVEN.
	/bin/mkdir -pv ${DOMU_CONF_DIR}/etc/sysconfig

	if [ ! -d ${DOMU_CONF_DIR} ] ; then
		echo "Cannot create directory structure for DomU configuration files; exiting."
		exit
	fi

	echo "  Creating /etc/fstab..."
	cat > ${DOMU_CONF_DIR}/etc/fstab <<EOF
# Begin /etc/fstab
# file system  mount-point  type   options           dump  fsck
#                                                          order
/dev/xvda1     /            ${FSTYPE}   defaults,noatime   1     1
EOF

	# FIXME -- this is now wrong...The correct var is something other
	# than XLAPP_DOMU_SWAP
	if [ -n "${SWAP_MUL}" ] ; then
		echo "    Adding swap in /etc/fstab..."
		cat >> ${DOMU_CONF_DIR}/etc/fstab <<EOF
/dev/xvda2     none         swap   sw                 0     0
EOF
	fi

	echo "    Finishing /etc/fstab..."
	cat >> ${DOMU_CONF_DIR}/etc/fstab <<EOF
none           /proc        proc   defaults           0     0
none           /sys         sysfs  defaults           0     0
none           /dev/pts     devpts gid=4,mode=620     0     0
none           /run         tmpfs  defaults           0     0
# End /etc/fstab
EOF

	echo "  Creating /etc/inittab..."
	cat /etc/inittab | \
	  sed 's/^[2-9].*respawn:.*getty.*/#\0/' > ${DOMU_CONF_DIR}/etc/inittab
	sed -i 's/tty1/hvc0/' ${DOMU_CONF_DIR}/etc/inittab

	echo "  Creating /etc/hosts..."
	cat > ${DOMU_CONF_DIR}/etc/hosts <<EOF
# Begin /etc/hosts (network card version)

127.0.0.1 localhost

# IP			HOSTNAME		[alias1, alias 2, ...]
${XLAPP_HOST_IP}	${XLAPP_DNS_FQDN}	${XLAPP_HOST_HOSTNAME}

# End /etc/hosts (network card version)
EOF

	echo "  Creating /etc/passwd..."
	cat > ${DOMU_CONF_DIR}/etc/passwd <<EOF
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/dev/null:/bin/false
nobody:x:99:99:Unprivileged User:/dev/null:/bin/false
lfs:x:101:101:LFS User:/home/lfs:/bin/bash
blfs:x:202:202:BLFS User:/home/blfs:/bin/bash
sshd:x:50:50:sshd PrivSep:/var/lib/sshd:/bin/false
EOF

	echo "  Creating /etc/shadow..."
	cat > ${DOMU_CONF_DIR}/etc/shadow <<EOF
root:x:15370:0:99999:7:::
bin:x:15370:0:99999:7:::
nobody:x:15370:0:99999:7:::
lfs:x:15370:0:99999:7:::
blfs:x:15370:0:99999:7:::
sshd:!:15370:0:99999:7:::
EOF

	#
	# Loop through eth[n] interfaces
	#
	XLAPP_ETH_IDX=0

	while [ $XLAPP_ETH_IDX -lt $XLAPP_ETH_COUNT ] ; do
        	_CUT_POS=$((1 + $XLAPP_ETH_IDX))
        	_SPEC=$(echo $XLAPP_HOST_IPS | cut -d ' ' -f $_CUT_POS)
        	_IP=$(echo $_SPEC | cut -d / -f 1)
        	_PREFIX=$(echo $_SPEC | cut -d / -f 2)
		_IFACE="eth${XLAPP_ETH_IDX}"
		_ETH_FILE="/etc/sysconfig/ifconfig.${_IFACE}"

		echo "  Creating ${_ETH_FILE}..."
		cat > ${DOMU_CONF_DIR}${_ETH_FILE} <<EOF
ONBOOT=yes
PHYS=${_IFACE}
SERVICE="ipv4-static"
IP=$_IP
PREFIX=$_PREFIX
EOF
		if [ 0 -eq $XLAPP_ETH_IDX ] ; then
			echo "GATEWAY=${XLAPP_HOST_GW}" >> ${DOMU_CONF_DIR}${_ETH_FILE}
		fi
		XLAPP_ETH_IDX=$((1 + ${XLAPP_ETH_IDX}))
	done

	echo "  Creating /etc/sysconfig/network..."
	cat > ${DOMU_CONF_DIR}/etc/sysconfig/network <<EOF
HOSTNAME=$XLAPP_HOST_HOSTNAME
EOF

	echo "  Creating /etc/resolv.conf..."
	cat > ${DOMU_CONF_DIR}/etc/resolv.conf <<EOF
# Begin /etc/resolv.conf

domain $XLAPP_DNS_DOMAIN_NAME
EOF

	for NAMESERVER in ${XLAPP_DNS_SERVERS} ; do
		NS=$(echo $NAMESERVER)
		echo "nameserver ${NS}" >> ${DOMU_CONF_DIR}/etc/resolv.conf
	done

	cat >> ${DOMU_CONF_DIR}/etc/resolv.conf <<EOF

# End /etc/resolv.conf
EOF

	echo "domU [ $DOMU_HOST ] configuration complete."

	####
	#
	# Config complete
	#
	####
	#exit

	########################################################################
	#
	# Creating image (LVM2)
	#
	########################################################################
	IMAGE_EXISTS=$(lvdisplay | grep -E "LV Name\s*${DOMU_HOST}" | wc -l)
	if [ 0 -lt $IMAGE_EXISTS -a -z "$FORCE_INIT" ] ; then
		echo "LVM2 disk phy [ $IMAGE ] exists; aborting."
		echo "Use -f to force lvremove/lvcreate."
		exit 1
	elif [ 0 -lt $IMAGE_EXISTS ] ; then
		echo "Removing LVM2 disk phy..."
		lvremove -fv $IMAGE
	fi
	echo "Creating LVM2-backed disk phy $IMAGE ($FSSIZE GB, $FSTYPE)..."

	FSSIZE_IN_MB=$((1024 * $FSSIZE))
	lvcreate -L ${FSSIZE_IN_MB}M -n $DOMU_HOST $VOL_GROUP

	########################################################################
	#
	# Creating file-system
	#
	########################################################################
	case $FSTYPE in
		ext2)
			FSEXTRAS="-E lazy_itable_init=0 -O sparse_super"
			;;
		ext3)
			FSEXTRAS="-E lazy_itable_init=0 -O sparse_super"
			;;
		ext4)
			FSEXTRAS="-E lazy_itable_init=0 -O sparse_super"
			;;
		*)
			FSEXTRAS=""
			;;
	esac

	echo "  Creating $FSTYPE filesystem with extras: '$FSEXTRAS'"

	mkfs -F -t $FSTYPE $FSEXTRAS $IMAGE

	########################################################################
	#
	# Mount image
	#
	########################################################################
	IMAGE_NAME=$(basename $IMAGE)
	MOUNT="fs-$IMAGE_NAME"
	echo "About to mount $IMAGE..."
	mkdir -vp ./$MOUNT

	mount -o noatime $IMAGE ./$MOUNT
	mount | grep $IMAGE_NAME

	########################################################################
	#
	# Copy snapshot.
	#
	########################################################################

	SNAPSHOT="${XLAPP_FILES_SOURCE}"
	echo "SNAPSHOT: $SNAPSHOT"

	if [ -f $SNAPSHOT ] ; then
		SNAPSHOT_PATH=$(readlink -f $SNAPSHOT)
		pushd ./$MOUNT
		echo "  About to untar $SNAPSHOT_PATH..."
		time tar --strip-components 1 -xf $SNAPSHOT_PATH
		popd
	elif [ -d $SNAPSHOT ] ; then
		echo "rsync'ing snapshot to ./$MOUNT/..."
		time rsync -a $SNAPSHOT/ ./$MOUNT/
	else
		echo "Source is neither dir or file; does $SNAPSHOT exist? Exiting."
		exit 1
	fi

	pushd ./$MOUNT
		echo "  Adding other directories..."
		mkdir {dev,proc,opt,sys,tmp}

		echo "  Changing perms on /tmp..."
		chmod 0777 tmp

		echo "  Adding devices..."
		cp -ax /dev/{console,null,random,urandom} dev

		rm -vf etc/rc.d/rc{0,6}.d/K46setclock
		rm -vf etc/rc.d/rc3.d/S99xlapp-boot-watchdog
		cp -a /lib/modules/3.1.0-xlapp-domU* lib/modules
	popd

	########################################################################
	#
	# Installing domU-specific config files
	#
	########################################################################
	pushd $DOMU_CONF_DIR
		find . -depth -print | cpio -pdm ../$MOUNT
	popd

	echo "Unmounting $IMAGE and deleting mount point..."
	umount $MOUNT
	rmdir $MOUNT

fi # The block in here only gets run if '-n' IS NOT GIVEN

########################################################################
#
# Creating xl-compatible domU configuration file (/etc/xen/vm)
#
########################################################################
mkdir -p /etc/xen/vm

XL_DOMU_CONF=/etc/xen/vm/${DOMU_HOST}.conf

if [ -e $XL_DOMU_CONF ] ; then
	mv -vf $XL_DOMU_CONF ${XL_DOMU_CONF}-$(totime)
fi

DOMU_VIFS=""
VIRT_ETH_IDX=0
for VIRT_MACADDR in $DOMU_MACADDRS ; do
	DOMU_VIF="'mac=${VIRT_MACADDR},bridge=br${VIRT_ETH_IDX}',"
	DOMU_VIFS="${DOMU_VIFS}${DOMU_VIF}"
	VIRT_ETH_IDX=$((1 + $VIRT_ETH_IDX))
done
DOMU_VIFS=$(echo $DOMU_VIFS | sed -e 's/,$//' -e 's/^\ //')

cat > $XL_DOMU_CONF <<EOF
kernel = "/boot/vmlinuz-3.1-lfs-7.0-domU"
memory = $VIRT_MEM
vcpus = $VIRT_CPUS
name = "${DOMU_HOST}"
vif = [ ${DOMU_VIFS} ]
disk = [ 'phy:${IMAGE},xvda1,w' ]
root = "/dev/xvda1"
no_migrate = 1
tsc_mode = "$TSC_MODE"
EOF

echo "Using this xl-compatible configuration for domU:"
cat $XL_DOMU_CONF

echo "########################################################################"
echo "#"
echo "#   DomU xl-configuration written to [ $XL_DOMU_CONF ]."
echo "#"
echo "#    DomU [ $DOMU_HOST ] templating complete; ready for Xen boot."
echo "#"
echo "########################################################################"

#! /bin/bash
set -e
set +h

usage() {
	cat <<EOF

Usage: $0 [OPTION]... target-FQDN [lfs-mount-point]

Creates an LFS-like config file using the following parameters:

********************************************************************************
  -u              Create domU config file (skip LFS params)
  -y              Continue build (don't do any init/prep)
  -s path         Location to look-for/download sources.
  -l part:type    LFS partition:fstype
  -p part:type    Host partition:fstype
  -b part:type    Boot partition:fstype
  -k "key"        SSH key
  -4 a.b.c.d/p    IP address/prefix (can be given multiple times)
  -g e.f.g.h      Gateway
  -d fqdn         DNS server (can be given multiple times)
  -t fqdn         NTP server (can be given multiple times)
  -a lang         Lang (e.g. an entry from 'locale -a')
  -z tz           TZ (e.g. tzselect output)
  -j concurrency  MAKEFLAGS
  -n              NO-TESTS (build Chap6 without tests)
  -r              Use RAMFS to build the system
  -A              CPU arch: generic|core2|amd (gen x86_64, core2/xeon, k8,opt)
                    Defaults to 'generic' if argument not given.
  -S              URL prefix (DEV OPTION - for a local src mirror)
  -M              Regenerate SSH moduli (this can take 4 or more hours).
  -h              Usage (this information)
********************************************************************************

If this script is called with '-u', then the <lfs-mount-point>
argument, if given, is ignored.  If this script is called
without '-u'--i.e., for a XLAPP dom0 build--then lfs-mount-point
must be given.

If this script is called with '-c', then ALL OTHER ARGUMENTS
are ignored.  The machine.config from the previous run will be
used.  As always, if a package is already built, it will be
ignored (see 'SCRIPT_GUARD' in 'build-all').

EOF
	exit 1
}

TRIM_CMD="sed -e s/^[[:space:]]*// -e s/[[:space:]]*$//"

echo "xlfs-conf args: [ ${@} ]"

FOR_DOMU=
SKIP_TESTS=
XLAPP_USE_RAMFS=
XLFS_GENERATE_SSH_MODULI=
XLAPP_CONTINUE=
XLAPP_ETH_COUNT=0
OPTERR=0 # Disables getopts errors (when called by domU).
while getopts "02:4:A:a:b:d:g:hj:k:l:np:rS:s:t:uyz:c:fhim:ns:v:w:" OPT ; do
	case "${OPT}" in
		4)
			XLAPP_ETH_COUNT=$((1 + $XLAPP_ETH_COUNT))
			XLAPP_HOST_IPS="${XLAPP_HOST_IPS} ${OPTARG}"
			;;
		A) XLAPP_ARCH="${OPTARG}";;
		a) XLAPP_TARGET_LANG="${OPTARG}";;
		b) XLAPP_BOOT_PART="${OPTARG}";;
		d) XLAPP_DNS_SERVERS="${XLAPP_DNS_SERVERS} ${OPTARG}";;
		g) XLAPP_HOST_GW="${OPTARG}";;
		h) usage;;
		j) MAKEFLAGS="-j ${OPTARG}";;
		k) XLAPP_SSH_PUBKEY="${OPTARG}";;
		l) XLAPP_LFS_PART="${OPTARG}";;
		M) XLFS_GENERATE_SSH_MODULI=true;;
		n) SKIP_TESTS=true;;
		#o) OUTPUT_FILE="${OPTARG}";;
		p) XLAPP_HOST_PART="${OPTARG}";;
		r) XLAPP_USE_RAMFS=true;;
		S) XLAPP_URL_PREFIX="${OPTARG}";;
		s) XLAPP_FILES_SOURCE="${OPTARG}";;
		t) XLAPP_NTP_SERVERS="${XLAPP_NTP_SERVERS} ${OPTARG}";;
		u) FOR_DOMU=true;;
		y) XLAPP_CONTINUE=true;;
		z) XLAPP_TARGET_TZ="${OPTARG}";;
		*) if [ -z ${FOR_DOMU} ] ; then echo "Unrecognized option $OPT." ; fi;;
	esac
done
shift $(($OPTIND - 1))

XLAPP_TOTIME=$(date '+%Y%m%d_%H%M%S')

# We're done.  Caller is saying there's already a machine.config.
if [ -n "$XLAPP_CONTINUE" ] ; then
	export XLAPP_CONTINUE=true
	echo "Continuing build; using existing config file."
	exit
fi

# This arg is going to be there regardless of caller (xlapp or domU).
XLAPP_DNS_FQDN=$1

if [ -z $XLAPP_DNS_FQDN ] ; then
	echo "Requires target-FQDN as mandatory first argument (missing)."
	usage
fi

echo "For domU? ${FOR_DOMU}"

if [ -n "${FOR_DOMU}" ] ; then
	# If this is domU caller.
	BUILD_CONF="${XLAPP_DNS_FQDN}-config"
else
	# If this is xlapp caller (not domU).
	BUILD_CONF="machine.config"
	XLAPP_LFS=$2

	if [ -z $XLAPP_LFS ] ; then
		echo "Requires 2 arguments: target-FQDN and lfs-mount-point (missing)."
		usage
	fi

	if [ ! -d $XLAPP_LFS ] ; then
		echo "LFS target directory ($XLAPP_LFS) isn't a directory."
		usage
	fi

	if [ -z $XLAPP_HOST_PART ] ; then
		echo "Please specific the HOST partition (e.g., /dev/sda2)."
		usage
	fi

	if [ -z $XLAPP_LFS_PART ] ; then
		echo "Please specify the LFS partition (e.g., /dev/sda5)."
		usage
	fi

	if [ -z $XLAPP_BOOT_PART ] ; then
		echo "Please specify the BOOT partition (e.g., /dev/sda1)."
		usage
	fi

	XLAPP_HOST_FSTYPE=$(echo $XLAPP_HOST_PART | awk -F \: '{print $2}')
	if [ -z $XLAPP_HOST_FSTYPE ] ; then
		XLAPP_HOST_FSTYPE=ext4
	else
		XLAPP_HOST_PART=$(echo $XLAPP_HOST_PART | cut -d \: -f 1)
	fi

	if [ ! -b $XLAPP_HOST_PART ] ; then
		echo "HOST partition ($XLAPP_HOST_PART) is not a block device."
		usage
	fi

	XLAPP_LFS_FSTYPE=$(echo $XLAPP_LFS_PART | awk -F \: '{print $2}')
	if [ -z $XLAPP_LFS_FSTYPE ] ; then
		XLAPP_LFS_FSTYPE=ext4
	else
		XLAPP_LFS_PART=$(echo $XLAPP_LFS_PART | cut -d \: -f 1)
	fi

	if [ ! -b $XLAPP_LFS_PART ] ; then
		echo "LFS partition ($XLAPP_LFS_PART) is not a block device."
		usage
	fi

	XLAPP_BOOT_FSTYPE=$(echo $XLAPP_BOOT_PART | awk -F \: '{print $2}')
	if [ -z $XLAPP_BOOT_FSTYPE ] ; then
		XLAPP_BOOT_FSTYPE=ext4
	else
		XLAPP_BOOT_PART=$(echo $XLAPP_BOOT_PART | cut -d \: -f 1)
	fi

	if [ ! -b $XLAPP_BOOT_PART ] ; then
		echo "BOOT partition ($XLAPP_BOOT_PART) is not a block device."
		usage
	fi

	INSTALL_INTO_BOOT=
	if [ "${XLAPP_BOOT_PART}" = "${XLAPP_LFS_PART}" ] ; then
		echo "Installing XLAPP into BOOT partition."
		INSTALL_INTO_BOOT=true
	fi

	if [ -z $XLAPP_ARCH ] ; then
		XLAPP_ARCH="generic"
	fi
fi

if [ -n "$XLAPP_FILES_SOURCE" ] ; then
	if [ ! -d $XLAPP_FILES_SOURCE ] ; then
		echo "Downloads cache must be a directory."
		usage
	fi
	echo "Using cached downloads."
fi

# Make sure that IP was given in IP/prefix mode
if [ -z "$XLAPP_HOST_IPS" ] ; then
	echo "Please specify the target IP address(es)."
	usage
fi
XLAPP_HOST_IPS=$(echo $XLAPP_HOST_IPS | $TRIM_CMD)

XLAPP_ETH_IDX=0
DOMU_MACADDRS=""
XLAPP_HOST_IP=""
while [ $XLAPP_ETH_IDX -lt $XLAPP_ETH_COUNT ] ; do
	_CUT_POS=$((1 + $XLAPP_ETH_IDX))
	_IP=$(echo $XLAPP_HOST_IPS | cut -d ' ' -f $_CUT_POS)
        DOMU_MACADDR="$(echo $_IP | awk -v eth=$XLAPP_ETH_IDX -F \. '{printf("00:16:3e:%02x:%02x:%02x", eth, $3, $4);}')"
        DOMU_MACADDRS="$DOMU_MACADDRS $DOMU_MACADDR"
        XLAPP_ETH_IDX=$((1 + $XLAPP_ETH_IDX))

	set +e
	echo $_IP | grep -c / > /dev/null 2>&1
	set -e
	if [ 0 -ne $? ] ; then
		echo "Please enter prefix-notation IP (e.g., a.b.c.d/pre)."
		usage
	fi

	_PREFIX=$(echo $_IP | cut -d \/ -f 2)
	set +e
	test 0 -le $_PREFIX -a 32 -ge $_PREFIX > /dev/null 2>&1
	if [ 0 -ne $? ] ; then
		echo "Please enter valid netmask prefix [0,32] ($_PREFIX)."
		usage
	fi
	set -e

	if [ -z $XLAPP_HOST_IP ] ; then
		XLAPP_HOST_IP=$(echo $_IP | cut -d \/ -f 1)
		XLAPP_HOST_PREFIX=$_PREFIX
		if [ -z $XLAPP_HOST_IP ] ; then
			echo "Please specify the target IP address."
			usage
		fi
	fi
done

if [ -z $XLAPP_HOST_GW ] ; then
	echo "Please specify the Default Gateway IP address."
	usage
fi

XLAPP_HOST_HOSTNAME=$(echo $XLAPP_DNS_FQDN | cut -d '.' -f 1)
XLAPP_DNS_DOMAIN_NAME=$(echo $XLAPP_DNS_FQDN | cut -d '.' -f 2-)

if [ -z $XLAPP_HOST_HOSTNAME ] ; then
	echo "The specified FQDN does not appear to be fully-qualified."
	usage
fi
if [ -z $XLAPP_DNS_DOMAIN_NAME ] ; then
	echo "The specified FQDN does not appear to be fully-qualified."
	usage
fi

# Set LANG/TZ if unspecified.
test -z $XLAPP_TARGET_LANG && XLAPP_TARGET_LANG="en_US.UTF-8"
test -z $XLAPP_TARGET_TZ && XLAPP_TARGET_TZ="America/Los_Angeles"

# Grab root password (skip if domU)
if [ -z "${FOR_DOMU}" ] ; then
rm -f passhash
gcc passhash.c -lcrypt -o passhash
_PASSWD="1"
_PASSWD2="2"
while [ "$_PASSWD" != "$_PASSWD2" ] ; do
	_PASS_SALT=$(date '+%M%S' | md5sum | cut -d ' ' -f 1 | cut -c 1-16)
	echo
	echo -n "What would you like as the new root password for LFS? "
	stty -echo && \
  	read _PASSWD
	stty echo && echo
	if [ -z $_PASSWD ] ; then
		echo "  [error] Empty password is not allowed for root; trying again."
		continue
	fi
	_PASSWD=$(./passhash $_PASSWD $_PASS_SALT)

	echo -n "       Please re-enter the new root password for LFS: "
	stty -echo && \
  	read _PASSWD2
	stty echo && echo
	if [ -z $_PASSWD2 ] ; then
		echo "    [error] No LFS root password confirmation given; try entering both again, please."
		continue
	fi
	_PASSWD2=$(./passhash $_PASSWD2 $_PASS_SALT)

	#
	# Check that the passwords match...
	#
	if [ "$_PASSWD" != "$_PASSWD2" ] ; then
		echo "    [error] New LFS root passwords don't match; retrying"
	else
		XLAPP_ROOT_PASSWD_HASH="$_PASSWD"
	fi
done
unset _PASSWD _PASSWD2
fi

echo "BUILD_CONF (config file): ${BUILD_CONF}"

if [ -z $BUILD_CONF ] ; then
	echo "  No BUILD_CONF (config file); aborting."
	exit 1
fi

# Should we remove the BUILD_CONF (machine.config or <machine>-config) file?
rm -f $BUILD_CONF
touch $BUILD_CONF

if [ -z "$FOR_DOMU" ] ; then
	cat >> $BUILD_CONF <<EOF
export XLAPP_TOTIME="${XLAPP_TOTIME}"
export XLAPP_LFS="${XLAPP_LFS}"
export XLAPP_URL_PREFIX='${XLAPP_URL_PREFIX}'
export XLAPP_FILES_SOURCE="${XLAPP_FILES_SOURCE}"

export XLAPP_HOST_PART="${XLAPP_HOST_PART}"
export XLAPP_LFS_PART="${XLAPP_LFS_PART}"
export XLAPP_BOOT_PART="${XLAPP_BOOT_PART}"

export XLAPP_HOST_FSTYPE="${XLAPP_HOST_FSTYPE}"
export XLAPP_LFS_FSTYPE="${XLAPP_LFS_FSTYPE}"
export XLAPP_BOOT_FSTYPE="${XLAPP_BOOT_FSTYPE}"

export XLAPP_ARCH="${XLAPP_ARCH}"

export XLAPP_ROOT_PASSWD_HASH='${XLAPP_ROOT_PASSWD_HASH}'

EOF
	XLAPP_CONF_DISTRO="xenfromscratch/host"
else
	DOMU_MACADDRS=$(echo $DOMU_MACADDRS | $TRIM_CMD)
	cat >> $BUILD_CONF <<EOF
export DOMU_MACADDRS="${DOMU_MACADDRS}"
EOF
	XLAPP_CONF_DISTRO="xenfromscratch/guest"
fi

# Trim some values
XLAPP_DNS_SERVERS=$(echo $XLAPP_DNS_SERVERS | $TRIM_CMD)
XLAPP_NTP_SERVERS=$(echo $XLAPP_NTP_SERVERS | $TRIM_CMD)

cat >> $BUILD_CONF <<EOF
export BUILD_CONF="${BUILD_CONF}"
export XLAPP_FILES_SOURCE="${XLAPP_FILES_SOURCE}"
export XLAPP_ETH_COUNT="${XLAPP_ETH_COUNT}"

export MAKEFLAGS="${MAKEFLAGS}"
export SKIP_TESTS="${SKIP_TESTS}"
export XLAPP_USE_RAMFS="${XLAPP_USE_RAMFS}"

export XLAPP_DNS_FQDN="${XLAPP_DNS_FQDN}"
export XLAPP_HOST_HOSTNAME="${XLAPP_HOST_HOSTNAME}"
export XLAPP_DNS_DOMAIN_NAME="${XLAPP_DNS_DOMAIN_NAME}"
export XLAPP_HOST_IP="${XLAPP_HOST_IP}"
export XLAPP_HOST_PREFIX="${XLAPP_HOST_PREFIX}"
export XLAPP_HOST_NETMASK="/${XLAPP_HOST_PREFIX}"
export XLAPP_HOST_GW="${XLAPP_HOST_GW}"
export XLAPP_DNS_SERVERS="${XLAPP_DNS_SERVERS}"
export XLAPP_NTP_SERVERS="${XLAPP_NTP_SERVERS}"

export XLAPP_HOST_IPS="${XLAPP_HOST_IPS}"
export XLAPP_ETH_COUNT="${XLAPP_ETH_COUNT}"
export DOMU_MACADDRS="${DOMU_MACADDRS}"

export XLAPP_TARGET_LANG="${XLAPP_TARGET_LANG}"
export XLAPP_TARGET_TZ="${XLAPP_TARGET_TZ}"

export XLAPP_CONF_DISTRO="${XLAPP_CONF_DISTRO}"
export XLAPP_CONF_DISTRO_CONTACT="qrux@xenfromscratch.org"
export XLAPP_CONF_DISTRO_MINI="xfs"
export XLAPP_SSH_PUBKEY="${XLAPP_SSH_PUBKEY}"
export XLFS_GENERATE_SSH_MODULI="${XLFS_GENERATE_SSH_MODULI}"
EOF

. $BUILD_CONF

echo "################################################################"
echo "These are the settings..."
echo

cat <<EOF
	 Build Config File: ${BUILD_CONF}
	          For domU? ${FOR_DOMU}

    Build files URL prefix: ${XLAPP_URL_PREFIX} (empty string = default)
              source files: ${XLAPP_FILES_SOURCE}

         Installing LFS to: ${XLAPP_LFS}
                 MAKEFLAGS: ${MAKEFLAGS}
                SKIP_TESTS: ${SKIP_TESTS} (empty string = 'no')
           XLAPP_USE_RAMFS: ${XLAPP_USE_RAMFS} (empty string = 'no')
            XLAPP_CONTINUE: ${XLAPP_CONTINUE} (empty string = 'no')

            HOST partition: ${XLAPP_HOST_PART} (empty string = domU)
             LFS partition: ${XLAPP_LFS_PART} (empty string = domU)
            BOOT partition: ${XLAPP_BOOT_PART} (empty string = domU)

      HOST filesystem type: ${XLAPP_HOST_FSTYPE} (empty string = domU)
       LFS filesystem type: ${XLAPP_LFS_FSTYPE} (empty string = domU)
      BOOT filesystem type: ${XLAPP_BOOT_FSTYPE} (empty string = domU)
    XLAPP CPU Architecture: ${XLAPP_ARCH}

                  New FQDN: ${XLAPP_DNS_FQDN}
             New host name: ${XLAPP_HOST_HOSTNAME}
           New domain name: ${XLAPP_DNS_DOMAIN_NAME}
                    New IP: ${XLAPP_HOST_IP}
                New prefix: ${XLAPP_HOST_PREFIX}
               New netmask: ${XLAPP_HOST_NETMASK}
               DNS servers: ${XLAPP_DNS_SERVERS}
               NTP servers: ${XLAPP_NTP_SERVERS}
           Default Gateway: ${XLAPP_HOST_GW}

                   All IPs: ${XLAPP_HOST_IPS}
  Ethernet Interface Count: ${XLAPP_ETH_COUNT}
            domU MAC addrs: ${DOMU_MACADDRS}

                  Language: ${XLAPP_TARGET_LANG}
                  Timezone: ${XLAPP_TARGET_TZ}

                  "Distro": ${XLAPP_CONF_DISTRO}
          "Distro" (short): ${XLAPP_CONF_DISTRO_MINI}
          "Distro Contact": ${XLAPP_CONF_DISTRO_CONTACT}
            SSH Public Key: ${XLAPP_SSH_PUBKEY}
       Generate SSH moduli? ${XLFS_GENERATE_SSH_MODULI} (empty string = 'no')
    Root Password (hashed): ${XLAPP_ROOT_PASSWD_HASH}
EOF
echo
echo "################################################################"
echo "#"
echo "# Configuration complete; data written to [ $BUILD_CONF ]."
echo "#"
echo "#   * To change, just run this script again."
echo "#"
echo "################################################################"
